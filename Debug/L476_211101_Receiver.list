
L476_211101_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c0  080039c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c8  080039c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  080039dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080039dc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd8c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f56  00000000  00000000  0002ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002fd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cda  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9a0  00000000  00000000  00057ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9605  00000000  00000000  00063682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014cc87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  0014ccdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003960 	.word	0x08003960

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003960 	.word	0x08003960

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	  RxStuff();
 80004c8:	f000 f8fe 	bl	80006c8 <RxStuff>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa59 	bl	800098e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f810 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8d4 	bl	800068c <MX_GPIO_Init>
  MX_UART4_Init();
 80004e4:	f000 f872 	bl	80005cc <MX_UART4_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f8a0 	bl	800062c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, (uint8_t *)buffRx, sizeof(buffRx));
 80004ec:	2201      	movs	r2, #1
 80004ee:	4902      	ldr	r1, [pc, #8]	; (80004f8 <main+0x24>)
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <main+0x28>)
 80004f2:	f002 f9e9 	bl	80028c8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x22>
 80004f8:	20000028 	.word	0x20000028
 80004fc:	200000b0 	.word	0x200000b0

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0b8      	sub	sp, #224	; 0xe0
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050a:	2244      	movs	r2, #68	; 0x44
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fa1e 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2288      	movs	r2, #136	; 0x88
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fa10 	bl	8003950 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fe30 	bl	80011b4 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800055a:	f000 f8af 	bl	80006bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000564:	2301      	movs	r3, #1
 8000566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f9fc 	bl	8001980 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800058e:	f000 f895 	bl	80006bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4;
 8000592:	2309      	movs	r3, #9
 8000594:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000596:	2300      	movs	r3, #0
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800059a:	2300      	movs	r3, #0
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fbf3 	bl	8001d8c <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005ac:	f000 f886 	bl	80006bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b4:	f000 fda8 	bl	8001108 <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005be:	f000 f87d 	bl	80006bc <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	37e0      	adds	r7, #224	; 0xe0
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_UART4_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_UART4_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2400;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_UART4_Init+0x58>)
 80005d8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80005dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_UART4_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_UART4_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_UART4_Init+0x58>)
 80005ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_UART4_Init+0x58>)
 80005f4:	220c      	movs	r2, #12
 80005f6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_UART4_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_UART4_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_UART4_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_UART4_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_UART4_Init+0x58>)
 8000612:	f002 f877 	bl	8002704 <HAL_UART_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 800061c:	f000 f84e 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000b0 	.word	0x200000b0
 8000628:	40004c00 	.word	0x40004c00

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <MX_USART1_UART_Init+0x5c>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000638:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800064c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000650:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000654:	2208      	movs	r2, #8
 8000656:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_USART1_UART_Init+0x58>)
 8000672:	f002 f847 	bl	8002704 <HAL_UART_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f81e 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000002c 	.word	0x2000002c
 8000688:	40013800 	.word	0x40013800

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x2c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <MX_GPIO_Init+0x2c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x2c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <RxStuff>:
volatile	uint8_t 	buffRx[1] = { 0 };
			uint8_t 	buffMain[buffSize] = { 0 };
			uint8_t 	buffTx[frameSize] = { 0 };

void RxStuff()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	transmitData(buffRx);
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <RxStuff+0x18>)
 80006ce:	f000 f923 	bl	8000918 <transmitData>
		RxCompleted++;
	}
	*/

	// Interrupt freigeben
	HAL_UART_Receive_IT(&huart4, (uint8_t *)buffRx, sizeof(buffRx));
 80006d2:	2201      	movs	r2, #1
 80006d4:	4902      	ldr	r1, [pc, #8]	; (80006e0 <RxStuff+0x18>)
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <RxStuff+0x1c>)
 80006d8:	f002 f8f6 	bl	80028c8 <HAL_UART_Receive_IT>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000028 	.word	0x20000028
 80006e4:	200000b0 	.word	0x200000b0

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	; 0x60
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a37      	ldr	r2, [pc, #220]	; (800082c <HAL_UART_MspInit+0xfc>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d131      	bne.n	80007b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <HAL_UART_MspInit+0x100>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	4a36      	ldr	r2, [pc, #216]	; (8000830 <HAL_UART_MspInit+0x100>)
 8000758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800075c:	6593      	str	r3, [r2, #88]	; 0x58
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <HAL_UART_MspInit+0x100>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <HAL_UART_MspInit+0x100>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a30      	ldr	r2, [pc, #192]	; (8000830 <HAL_UART_MspInit+0x100>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <HAL_UART_MspInit+0x100>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8000782:	2303      	movs	r3, #3
 8000784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000792:	2308      	movs	r3, #8
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f000 fafa 	bl	8000d98 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2034      	movs	r0, #52	; 0x34
 80007aa:	f000 fa40 	bl	8000c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80007ae:	2034      	movs	r0, #52	; 0x34
 80007b0:	f000 fa59 	bl	8000c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b4:	e036      	b.n	8000824 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART1)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <HAL_UART_MspInit+0x104>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d131      	bne.n	8000824 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <HAL_UART_MspInit+0x100>)
 80007c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c4:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <HAL_UART_MspInit+0x100>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6613      	str	r3, [r2, #96]	; 0x60
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_UART_MspInit+0x100>)
 80007ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_UART_MspInit+0x100>)
 80007da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_UART_MspInit+0x100>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_UART_MspInit+0x100>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000802:	2307      	movs	r3, #7
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fac2 	bl	8000d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2025      	movs	r0, #37	; 0x25
 800081a:	f000 fa08 	bl	8000c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081e:	2025      	movs	r0, #37	; 0x25
 8000820:	f000 fa21 	bl	8000c66 <HAL_NVIC_EnableIRQ>
}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	; 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004c00 	.word	0x40004c00
 8000830:	40021000 	.word	0x40021000
 8000834:	40013800 	.word	0x40013800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f8d8 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <USART1_IRQHandler+0x10>)
 8000892:	f002 f85d 	bl	8002950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000002c 	.word	0x2000002c

080008a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <UART4_IRQHandler+0x10>)
 80008a6:	f002 f853 	bl	8002950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000b0 	.word	0x200000b0

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <SystemInit+0x5c>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <SystemInit+0x5c>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SystemInit+0x60>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <SystemInit+0x60>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <SystemInit+0x60>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <SystemInit+0x60>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <SystemInit+0x60>)
 80008e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <SystemInit+0x60>)
 80008ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x60>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x60>)
 80008f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SystemInit+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	40021000 	.word	0x40021000

08000918 <transmitData>:
#include <receiver.h>

void transmitData(uint8_t *buffMain)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)buffRx, sizeof(buffRx), 10);
 8000920:	230a      	movs	r3, #10
 8000922:	2201      	movs	r2, #1
 8000924:	4903      	ldr	r1, [pc, #12]	; (8000934 <transmitData+0x1c>)
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <transmitData+0x20>)
 8000928:	f001 ff3a 	bl	80027a0 <HAL_UART_Transmit>
	// mit Interrupt umsetzen & im Callback "Receive" starten?
	// Byte für Byte pipelinen?
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000028 	.word	0x20000028
 8000938:	200000b0 	.word	0x200000b0

0800093c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000974 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000940:	f7ff ffb8 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000944:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000946:	e003      	b.n	8000950 <LoopCopyDataInit>

08000948 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800094a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800094c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800094e:	3104      	adds	r1, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000954:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000956:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000958:	d3f6      	bcc.n	8000948 <CopyDataInit>
	ldr	r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopForever+0x12>)
	b	LoopFillZerobss
 800095c:	e002      	b.n	8000964 <LoopFillZerobss>

0800095e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800095e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000960:	f842 3b04 	str.w	r3, [r2], #4

08000964 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <LoopForever+0x16>)
	cmp	r2, r3
 8000966:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000968:	d3f9      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f002 ffcd 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096e:	f7ff fdb1 	bl	80004d4 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000974:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000978:	080039d0 	.word	0x080039d0
	ldr	r0, =_sdata
 800097c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000980:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000984:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000988:	20000138 	.word	0x20000138

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>

0800098e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f93d 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f80e 	bl	80009c0 <HAL_InitTick>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	e001      	b.n	80009b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b0:	f7ff fe9a 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <HAL_InitTick+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d023      	beq.n	8000a1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_InitTick+0x70>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_InitTick+0x6c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f949 	bl	8000c82 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10f      	bne.n	8000a16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d809      	bhi.n	8000a10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f913 	bl	8000c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_InitTick+0x74>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	e007      	b.n	8000a20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	e004      	b.n	8000a20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
 8000a1a:	e001      	b.n	8000a20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000134 	.word	0x20000134

08000a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000134 	.word	0x20000134

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff29 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff3e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff31 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffa2 	bl	8000bd4 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d008      	beq.n	8000cc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e022      	b.n	8000d0a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 020e 	bic.w	r2, r2, #14
 8000cd2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	f003 021c 	and.w	r2, r3, #28
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d005      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2204      	movs	r2, #4
 8000d32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e029      	b.n	8000d8e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 020e 	bic.w	r2, r2, #14
 8000d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0201 	bic.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 021c 	and.w	r2, r3, #28
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3
    }
  }
  return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e17f      	b.n	80010a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8171 	beq.w	80010a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d00b      	beq.n	8000de0 <HAL_GPIO_Init+0x48>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	2b11      	cmp	r3, #17
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b12      	cmp	r3, #18
 8000dde:	d130      	bne.n	8000e42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e16:	2201      	movs	r2, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	091b      	lsrs	r3, r3, #4
 8000e2c:	f003 0201 	and.w	r2, r3, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d118      	bne.n	8000e80 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x128>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80ac 	beq.w	80010a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	; (80010c8 <HAL_GPIO_Init+0x330>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a5e      	ldr	r2, [pc, #376]	; (80010c8 <HAL_GPIO_Init+0x330>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b5c      	ldr	r3, [pc, #368]	; (80010c8 <HAL_GPIO_Init+0x330>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f62:	4a5a      	ldr	r2, [pc, #360]	; (80010cc <HAL_GPIO_Init+0x334>)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x242>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <HAL_GPIO_Init+0x338>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x23e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x33c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x23a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <HAL_GPIO_Init+0x340>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x236>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_GPIO_Init+0x344>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x232>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	; (80010e0 <HAL_GPIO_Init+0x348>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x22e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4a      	ldr	r2, [pc, #296]	; (80010e4 <HAL_GPIO_Init+0x34c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x22a>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e00c      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e00a      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fca:	2304      	movs	r3, #4
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x244>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fec:	4937      	ldr	r1, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x334>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_GPIO_Init+0x350>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101e:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <HAL_GPIO_Init+0x350>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <HAL_GPIO_Init+0x350>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001048:	4a27      	ldr	r2, [pc, #156]	; (80010e8 <HAL_GPIO_Init+0x350>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_GPIO_Init+0x350>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001072:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <HAL_GPIO_Init+0x350>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_GPIO_Init+0x350>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <HAL_GPIO_Init+0x350>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f ae78 	bne.w	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	48001000 	.word	0x48001000
 80010e0:	48001400 	.word	0x48001400
 80010e4:	48001800 	.word	0x48001800
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_PWREx_GetVoltageRange+0x18>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001116:	d130      	bne.n	800117a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001124:	d038      	beq.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2232      	movs	r2, #50	; 0x32
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9b      	lsrs	r3, r3, #18
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114c:	e002      	b.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3b01      	subs	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001160:	d102      	bne.n	8001168 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f2      	bne.n	800114e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001174:	d110      	bne.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e00f      	b.n	800119a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001186:	d007      	beq.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40007000 	.word	0x40007000
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e3d4      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c6:	4ba1      	ldr	r3, [pc, #644]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d0:	4b9e      	ldr	r3, [pc, #632]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80e4 	beq.w	80013b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_RCC_OscConfig+0x4a>
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	f040 808b 	bne.w	800130c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	f040 8087 	bne.w	800130c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011fe:	4b93      	ldr	r3, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x62>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e3ac      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	4b8c      	ldr	r3, [pc, #560]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_RCC_OscConfig+0x7c>
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800122e:	e005      	b.n	800123c <HAL_RCC_OscConfig+0x88>
 8001230:	4b86      	ldr	r3, [pc, #536]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800123c:	4293      	cmp	r3, r2
 800123e:	d223      	bcs.n	8001288 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fd41 	bl	8001ccc <RCC_SetFlashLatencyFromMSIRange>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e38d      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001254:	4b7d      	ldr	r3, [pc, #500]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a7c      	ldr	r2, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b7a      	ldr	r3, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4977      	ldr	r1, [pc, #476]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	4972      	ldr	r1, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
 8001286:	e025      	b.n	80012d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001288:	4b70      	ldr	r3, [pc, #448]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6f      	ldr	r2, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	496a      	ldr	r1, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a6:	4b69      	ldr	r3, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	4965      	ldr	r1, [pc, #404]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fd01 	bl	8001ccc <RCC_SetFlashLatencyFromMSIRange>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e34d      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d4:	f000 fc36 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	495a      	ldr	r1, [pc, #360]	; (8001450 <HAL_RCC_OscConfig+0x29c>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a58      	ldr	r2, [pc, #352]	; (8001454 <HAL_RCC_OscConfig+0x2a0>)
 80012f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012f4:	4b58      	ldr	r3, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x2a4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb61 	bl	80009c0 <HAL_InitTick>
 80012fe:	4603      	mov	r3, r0
 8001300:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d052      	beq.n	80013ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	e331      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d032      	beq.n	800137a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb9e 	bl	8000a60 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001328:	f7ff fb9a 	bl	8000a60 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e31a      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b3e      	ldr	r3, [pc, #248]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	493b      	ldr	r1, [pc, #236]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	4936      	ldr	r1, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e01a      	b.n	80013b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001386:	f7ff fb6b 	bl	8000a60 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800138e:	f7ff fb67 	bl	8000a60 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e2e7      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x1da>
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d074      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x21a>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b0c      	cmp	r3, #12
 80013c6:	d10e      	bne.n	80013e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d10b      	bne.n	80013e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d064      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d160      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e2c4      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x24a>
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x298>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e01d      	b.n	800143a <HAL_RCC_OscConfig+0x286>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x26e>
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800140e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x298>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x286>
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_RCC_OscConfig+0x298>)
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01c      	beq.n	800147c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fb0d 	bl	8000a60 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001448:	e011      	b.n	800146e <HAL_RCC_OscConfig+0x2ba>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	08003978 	.word	0x08003978
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fb00 	bl	8000a60 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e280      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146e:	4baf      	ldr	r3, [pc, #700]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x2a8>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff faf0 	bl	8000a60 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff faec 	bl	8000a60 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e26c      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001496:	4ba5      	ldr	r3, [pc, #660]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x2d0>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d060      	beq.n	8001574 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x310>
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d119      	bne.n	80014f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d116      	bne.n	80014f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c4:	4b99      	ldr	r3, [pc, #612]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x328>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e249      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	4990      	ldr	r1, [pc, #576]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f0:	e040      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d023      	beq.n	8001542 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fa:	4b8c      	ldr	r3, [pc, #560]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a8b      	ldr	r2, [pc, #556]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001506:	f7ff faab 	bl	8000a60 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff faa7 	bl	8000a60 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e227      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	497c      	ldr	r1, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e018      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fa87 	bl	8000a60 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fa83 	bl	8000a60 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e203      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001568:	4b70      	ldr	r3, [pc, #448]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d03c      	beq.n	80015fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	4a67      	ldr	r2, [pc, #412]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff fa62 	bl	8000a60 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fa5e 	bl	8000a60 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1de      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ef      	beq.n	80015a0 <HAL_RCC_OscConfig+0x3ec>
 80015c0:	e01b      	b.n	80015fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c8:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa45 	bl	8000a60 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fa41 	bl	8000a60 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1c1      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ef      	bne.n	80015da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a6 	beq.w	8001754 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b44      	ldr	r3, [pc, #272]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6593      	str	r3, [r2, #88]	; 0x58
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d118      	bne.n	8001672 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a3a      	ldr	r2, [pc, #232]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164c:	f7ff fa08 	bl	8000a60 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff fa04 	bl	8000a60 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e184      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x57c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_RCC_OscConfig+0x4d8>
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168a:	e024      	b.n	80016d6 <HAL_RCC_OscConfig+0x522>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d110      	bne.n	80016b6 <HAL_RCC_OscConfig+0x502>
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x578>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x578>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b4:	e00f      	b.n	80016d6 <HAL_RCC_OscConfig+0x522>
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d016      	beq.n	800170c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff f9bf 	bl	8000a60 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff f9bb 	bl	8000a60 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e139      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_OscConfig+0x578>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ed      	beq.n	80016e6 <HAL_RCC_OscConfig+0x532>
 800170a:	e01a      	b.n	8001742 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff f9a8 	bl	8000a60 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001712:	e00f      	b.n	8001734 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff f9a4 	bl	8000a60 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d906      	bls.n	8001734 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e122      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b90      	ldr	r3, [pc, #576]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e8      	bne.n	8001714 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a8a      	ldr	r2, [pc, #552]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8108 	beq.w	800196e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	2b02      	cmp	r3, #2
 8001764:	f040 80d0 	bne.w	8001908 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001768:	4b83      	ldr	r3, [pc, #524]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	429a      	cmp	r2, r3
 800177a:	d130      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	3b01      	subs	r3, #1
 8001788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d127      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001798:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11f      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017a8:	2a07      	cmp	r2, #7
 80017aa:	bf14      	ite	ne
 80017ac:	2201      	movne	r2, #1
 80017ae:	2200      	moveq	r2, #0
 80017b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d113      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d109      	bne.n	80017de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d06e      	beq.n	80018bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d069      	beq.n	80018b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017e4:	4b64      	ldr	r3, [pc, #400]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017f0:	4b61      	ldr	r3, [pc, #388]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b7      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5c      	ldr	r2, [pc, #368]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800180c:	f7ff f928 	bl	8000a60 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f924 	bl	8000a60 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0a4      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001826:	4b54      	ldr	r3, [pc, #336]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <HAL_RCC_OscConfig+0x7c8>)
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001842:	3a01      	subs	r2, #1
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	4311      	orrs	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800184c:	0212      	lsls	r2, r2, #8
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001854:	0852      	lsrs	r2, r2, #1
 8001856:	3a01      	subs	r2, #1
 8001858:	0552      	lsls	r2, r2, #21
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001860:	0852      	lsrs	r2, r2, #1
 8001862:	3a01      	subs	r2, #1
 8001864:	0652      	lsls	r2, r2, #25
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800186c:	0912      	lsrs	r2, r2, #4
 800186e:	0452      	lsls	r2, r2, #17
 8001870:	430a      	orrs	r2, r1
 8001872:	4941      	ldr	r1, [pc, #260]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001890:	f7ff f8e6 	bl	8000a60 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f8e2 	bl	8000a60 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e062      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b6:	e05a      	b.n	800196e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e059      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d152      	bne.n	800196e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e0:	f7ff f8be 	bl	8000a60 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f8ba 	bl	8000a60 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e03a      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x734>
 8001906:	e032      	b.n	800196e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d02d      	beq.n	800196a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001918:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800192c:	f023 0303 	bic.w	r3, r3, #3
 8001930:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 8001938:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f88d 	bl	8000a60 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f889 	bl	8000a60 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e009      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_OscConfig+0x7c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x796>
 8001968:	e001      	b.n	800196e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	f99d808c 	.word	0xf99d808c

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0c8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d910      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 0207 	bic.w	r2, r3, #7
 80019aa:	4961      	ldr	r1, [pc, #388]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b0      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d04c      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d121      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e09e      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d115      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e092      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e086      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e07e      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a28:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 0203 	bic.w	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	493f      	ldr	r1, [pc, #252]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3a:	f7ff f811 	bl	8000a60 <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a42:	f7ff f80d 	bl	8000a60 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e066      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 020c 	and.w	r2, r3, #12
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d1eb      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	492c      	ldr	r1, [pc, #176]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d210      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4924      	ldr	r1, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e036      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4918      	ldr	r1, [pc, #96]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4910      	ldr	r1, [pc, #64]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af6:	f000 f825 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_ClockConfig+0x1b4>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490c      	ldr	r1, [pc, #48]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff50 	bl	80009c0 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b24:	7afb      	ldrb	r3, [r7, #11]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003978 	.word	0x08003978
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d121      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11e      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	e004      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d134      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0xa6>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d003      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8001be8:	e005      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bec:	617b      	str	r3, [r7, #20]
      break;
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf2:	617b      	str	r3, [r7, #20]
      break;
 8001bf4:	e002      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	617b      	str	r3, [r7, #20]
      break;
 8001bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	3301      	adds	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	fb02 f203 	mul.w	r2, r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	0e5b      	lsrs	r3, r3, #25
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003990 	.word	0x08003990
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	02dc6c00 	.word	0x02dc6c00

08001c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08003988 	.word	0x08003988

08001ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca4:	f7ff ffda 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08003988 	.word	0x08003988

08001ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ce4:	f7ff fa02 	bl	80010ec <HAL_PWREx_GetVoltageRange>
 8001ce8:	6178      	str	r0, [r7, #20]
 8001cea:	e014      	b.n	8001d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d04:	f7ff f9f2 	bl	80010ec <HAL_PWREx_GetVoltageRange>
 8001d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d10b      	bne.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d919      	bls.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2ba0      	cmp	r3, #160	; 0xa0
 8001d28:	d902      	bls.n	8001d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e013      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e010      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d902      	bls.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e00a      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d102      	bne.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d48:	2302      	movs	r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e004      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b70      	cmp	r3, #112	; 0x70
 8001d52:	d101      	bne.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 0207 	bic.w	r2, r3, #7
 8001d60:	4909      	ldr	r1, [pc, #36]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40022000 	.word	0x40022000

08001d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d94:	2300      	movs	r3, #0
 8001d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d98:	2300      	movs	r3, #0
 8001d9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d041      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001db0:	d02a      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001db2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001db6:	d824      	bhi.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dbc:	d008      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dc2:	d81e      	bhi.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dcc:	d010      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dce:	e018      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dd0:	4b86      	ldr	r3, [pc, #536]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a85      	ldr	r2, [pc, #532]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ddc:	e015      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fabb 	bl	8002360 <RCCEx_PLLSAI1_Config>
 8001dea:	4603      	mov	r3, r0
 8001dec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dee:	e00c      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3320      	adds	r3, #32
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fba6 	bl	8002548 <RCCEx_PLLSAI2_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e00:	e003      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	74fb      	strb	r3, [r7, #19]
      break;
 8001e06:	e000      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e10:	4b76      	ldr	r3, [pc, #472]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1e:	4973      	ldr	r1, [pc, #460]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e26:	e001      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d041      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e40:	d02a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e46:	d824      	bhi.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e4c:	d008      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e52:	d81e      	bhi.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e5e:	e018      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e60:	4b62      	ldr	r3, [pc, #392]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a61      	ldr	r2, [pc, #388]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e6c:	e015      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fa73 	bl	8002360 <RCCEx_PLLSAI1_Config>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e7e:	e00c      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3320      	adds	r3, #32
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fb5e 	bl	8002548 <RCCEx_PLLSAI2_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e90:	e003      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	74fb      	strb	r3, [r7, #19]
      break;
 8001e96:	e000      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ea0:	4b52      	ldr	r3, [pc, #328]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eae:	494f      	ldr	r1, [pc, #316]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eb6:	e001      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a0 	beq.w	800200a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00d      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fda8 	bl	8000a60 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f12:	e009      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7fe fda4 	bl	8000a60 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d902      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	74fb      	strb	r3, [r7, #19]
        break;
 8001f26:	e005      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d15c      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01f      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d019      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fd63 	bl	8000a60 <HAL_GetTick>
 8001f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fd5f 	bl	8000a60 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d902      	bls.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fb4:	e006      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ec      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fda:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fe2:	e009      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
 8001fe8:	e006      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff8:	7c7b      	ldrb	r3, [r7, #17]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	4a9d      	ldr	r2, [pc, #628]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002016:	4b98      	ldr	r3, [pc, #608]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201c:	f023 0203 	bic.w	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	4994      	ldr	r1, [pc, #592]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002038:	4b8f      	ldr	r3, [pc, #572]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f023 020c 	bic.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	498c      	ldr	r1, [pc, #560]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	4983      	ldr	r1, [pc, #524]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800207c:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	497b      	ldr	r1, [pc, #492]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ac:	4972      	ldr	r1, [pc, #456]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	496a      	ldr	r1, [pc, #424]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	4961      	ldr	r1, [pc, #388]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002104:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	4959      	ldr	r1, [pc, #356]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002134:	4950      	ldr	r1, [pc, #320]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002148:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	4948      	ldr	r1, [pc, #288]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	493f      	ldr	r1, [pc, #252]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d028      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800218c:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800219a:	4937      	ldr	r1, [pc, #220]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021aa:	d106      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a31      	ldr	r2, [pc, #196]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b6:	60d3      	str	r3, [r2, #12]
 80021b8:	e011      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c2:	d10c      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f8c8 	bl	8002360 <RCCEx_PLLSAI1_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d028      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021ea:	4b23      	ldr	r3, [pc, #140]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	491f      	ldr	r1, [pc, #124]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002208:	d106      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002214:	60d3      	str	r3, [r2, #12]
 8002216:	e011      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002220:	d10c      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	2101      	movs	r1, #1
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f899 	bl	8002360 <RCCEx_PLLSAI1_Config>
 800222e:	4603      	mov	r3, r0
 8002230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002232:	7cfb      	ldrb	r3, [r7, #19]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02b      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002266:	d109      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a02      	ldr	r2, [pc, #8]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
 8002274:	e014      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	2101      	movs	r1, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f867 	bl	8002360 <RCCEx_PLLSAI1_Config>
 8002292:	4603      	mov	r3, r0
 8002294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d02f      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ba:	4928      	ldr	r1, [pc, #160]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	2102      	movs	r1, #2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f844 	bl	8002360 <RCCEx_PLLSAI1_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d014      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	74bb      	strb	r3, [r7, #18]
 80022e6:	e011      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022f0:	d10c      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3320      	adds	r3, #32
 80022f6:	2102      	movs	r1, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f925 	bl	8002548 <RCCEx_PLLSAI2_Config>
 80022fe:	4603      	mov	r3, r0
 8002300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800234a:	4904      	ldr	r1, [pc, #16]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002352:	7cbb      	ldrb	r3, [r7, #18]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000

08002360 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800236e:	4b75      	ldr	r3, [pc, #468]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d018      	beq.n	80023ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0203 	and.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d10d      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
       ||
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002392:	4b6c      	ldr	r3, [pc, #432]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
       ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d047      	beq.n	8002436 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e044      	b.n	8002436 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d018      	beq.n	80023e6 <RCCEx_PLLSAI1_Config+0x86>
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d825      	bhi.n	8002404 <RCCEx_PLLSAI1_Config+0xa4>
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d002      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x62>
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d009      	beq.n	80023d4 <RCCEx_PLLSAI1_Config+0x74>
 80023c0:	e020      	b.n	8002404 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023c2:	4b60      	ldr	r3, [pc, #384]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11d      	bne.n	800240a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d2:	e01a      	b.n	800240a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d116      	bne.n	800240e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e4:	e013      	b.n	800240e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023e6:	4b57      	ldr	r3, [pc, #348]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002402:	e006      	b.n	8002412 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e004      	b.n	8002414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240a:	bf00      	nop
 800240c:	e002      	b.n	8002414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002412:	bf00      	nop
    }

    if(status == HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	430b      	orrs	r3, r1
 8002430:	4944      	ldr	r1, [pc, #272]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d17d      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a40      	ldr	r2, [pc, #256]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002448:	f7fe fb0a 	bl	8000a60 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800244e:	e009      	b.n	8002464 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002450:	f7fe fb06 	bl	8000a60 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d902      	bls.n	8002464 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	73fb      	strb	r3, [r7, #15]
        break;
 8002462:	e005      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ef      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d160      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d111      	bne.n	80024a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	0211      	lsls	r1, r2, #8
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	0912      	lsrs	r2, r2, #4
 8002494:	0452      	lsls	r2, r2, #17
 8002496:	430a      	orrs	r2, r1
 8002498:	492a      	ldr	r1, [pc, #168]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	610b      	str	r3, [r1, #16]
 800249e:	e027      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d112      	bne.n	80024cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a6:	4b27      	ldr	r3, [pc, #156]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	0211      	lsls	r1, r2, #8
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6912      	ldr	r2, [r2, #16]
 80024bc:	0852      	lsrs	r2, r2, #1
 80024be:	3a01      	subs	r2, #1
 80024c0:	0552      	lsls	r2, r2, #21
 80024c2:	430a      	orrs	r2, r1
 80024c4:	491f      	ldr	r1, [pc, #124]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	610b      	str	r3, [r1, #16]
 80024ca:	e011      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6892      	ldr	r2, [r2, #8]
 80024dc:	0211      	lsls	r1, r2, #8
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6952      	ldr	r2, [r2, #20]
 80024e2:	0852      	lsrs	r2, r2, #1
 80024e4:	3a01      	subs	r2, #1
 80024e6:	0652      	lsls	r2, r2, #25
 80024e8:	430a      	orrs	r2, r1
 80024ea:	4916      	ldr	r1, [pc, #88]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe fab0 	bl	8000a60 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002502:	e009      	b.n	8002518 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002504:	f7fe faac 	bl	8000a60 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	73fb      	strb	r3, [r7, #15]
          break;
 8002516:	e005      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4904      	ldr	r1, [pc, #16]	; (8002544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000

08002548 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002556:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d018      	beq.n	8002594 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002562:	4b67      	ldr	r3, [pc, #412]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0203 	and.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d10d      	bne.n	800258e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
       ||
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
       ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d047      	beq.n	800261e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e044      	b.n	800261e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d018      	beq.n	80025ce <RCCEx_PLLSAI2_Config+0x86>
 800259c:	2b03      	cmp	r3, #3
 800259e:	d825      	bhi.n	80025ec <RCCEx_PLLSAI2_Config+0xa4>
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d002      	beq.n	80025aa <RCCEx_PLLSAI2_Config+0x62>
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d009      	beq.n	80025bc <RCCEx_PLLSAI2_Config+0x74>
 80025a8:	e020      	b.n	80025ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025aa:	4b55      	ldr	r3, [pc, #340]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11d      	bne.n	80025f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e01a      	b.n	80025f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d116      	bne.n	80025f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e013      	b.n	80025f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ce:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025da:	4b49      	ldr	r3, [pc, #292]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ea:	e006      	b.n	80025fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e004      	b.n	80025fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025f2:	bf00      	nop
 80025f4:	e002      	b.n	80025fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	430b      	orrs	r3, r1
 8002618:	4939      	ldr	r1, [pc, #228]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d167      	bne.n	80026f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a35      	ldr	r2, [pc, #212]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002630:	f7fe fa16 	bl	8000a60 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002636:	e009      	b.n	800264c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002638:	f7fe fa12 	bl	8000a60 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	73fb      	strb	r3, [r7, #15]
        break;
 800264a:	e005      	b.n	8002658 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ef      	bne.n	8002638 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d14a      	bne.n	80026f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	0211      	lsls	r1, r2, #8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	0912      	lsrs	r2, r2, #4
 800267c:	0452      	lsls	r2, r2, #17
 800267e:	430a      	orrs	r2, r1
 8002680:	491f      	ldr	r1, [pc, #124]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	614b      	str	r3, [r1, #20]
 8002686:	e011      	b.n	80026ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002690:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	0211      	lsls	r1, r2, #8
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6912      	ldr	r2, [r2, #16]
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0652      	lsls	r2, r2, #25
 80026a4:	430a      	orrs	r2, r1
 80026a6:	4916      	ldr	r1, [pc, #88]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe f9d2 	bl	8000a60 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026be:	e009      	b.n	80026d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026c0:	f7fe f9ce 	bl	8000a60 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	73fb      	strb	r3, [r7, #15]
          break;
 80026d2:	e005      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	4904      	ldr	r1, [pc, #16]	; (8002700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e040      	b.n	8002798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe f802 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fb26 	bl	8002d94 <UART_SetConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e022      	b.n	8002798 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fda4 	bl	80032a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800276e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800277e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fe2b 	bl	80033ec <UART_CheckIdleState>
 8002796:	4603      	mov	r3, r0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 8082 	bne.w	80028be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_UART_Transmit+0x26>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07a      	b.n	80028c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_UART_Transmit+0x38>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e073      	b.n	80028c0 <HAL_UART_Transmit+0x120>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	; 0x21
 80027ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ee:	f7fe f937 	bl	8000a60 <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Transmit+0x80>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002830:	e02d      	b.n	800288e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fe1e 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e039      	b.n	80028c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	881a      	ldrh	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285e:	b292      	uxth	r2, r2
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3302      	adds	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e008      	b.n	800287c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b292      	uxth	r2, r2
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1cb      	bne.n	8002832 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2140      	movs	r1, #64	; 0x40
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fdea 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e005      	b.n	80028c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d131      	bne.n	8002942 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_UART_Receive_IT+0x22>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e02a      	b.n	8002944 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_UART_Receive_IT+0x34>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e023      	b.n	8002944 <HAL_UART_Receive_IT+0x7c>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_UART_Receive_IT+0x84>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002930:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	461a      	mov	r2, r3
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fe1d 	bl	8003578 <UART_Start_Receive_IT>
 800293e:	4603      	mov	r3, r0
 8002940:	e000      	b.n	8002944 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40008000 	.word	0x40008000

08002950 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f640 030f 	movw	r3, #2063	; 0x80f
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d113      	bne.n	80029a8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00e      	beq.n	80029a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 81ce 	beq.w	8002d3a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
      }
      return;
 80029a6:	e1c8      	b.n	8002d3a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80e3 	beq.w	8002b76 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4ba6      	ldr	r3, [pc, #664]	; (8002c58 <HAL_UART_IRQHandler+0x308>)
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80d8 	beq.w	8002b76 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_UART_IRQHandler+0xa2>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_UART_IRQHandler+0xce>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_UART_IRQHandler+0xfa>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2204      	movs	r2, #4
 8002a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a40:	f043 0202 	orr.w	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d011      	beq.n	8002aae <HAL_UART_IRQHandler+0x15e>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8142 	beq.w	8002d3e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00c      	beq.n	8002ade <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d004      	beq.n	8002afe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d031      	beq.n	8002b62 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fdc2 	bl	8003688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d123      	bne.n	8002b5a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d013      	beq.n	8002b52 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_UART_IRQHandler+0x30c>)
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f8ed 	bl	8000d16 <HAL_DMA_Abort_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d017      	beq.n	8002b72 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b50:	e00f      	b.n	8002b72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f908 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b58:	e00b      	b.n	8002b72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f904 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	e007      	b.n	8002b72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f900 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002b70:	e0e5      	b.n	8002d3e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b72:	bf00      	nop
    return;
 8002b74:	e0e3      	b.n	8002d3e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	f040 80a9 	bne.w	8002cd2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80a3 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 809d 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d158      	bne.n	8002c60 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80c1 	beq.w	8002d42 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002bc6:	893a      	ldrh	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f080 80ba 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d12a      	bne.n	8002c3c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c14:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0210 	bic.w	r2, r2, #16
 8002c30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f82f 	bl	8000c9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f893 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c56:	e074      	b.n	8002d42 <HAL_UART_IRQHandler+0x3f2>
 8002c58:	04000120 	.word	0x04000120
 8002c5c:	080036e7 	.word	0x080036e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d060      	beq.n	8002d46 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c92:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0210 	bic.w	r2, r2, #16
 8002cc4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f856 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cd0:	e039      	b.n	8002d46 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x3a8>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fdff 	bl	80038f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cf6:	e029      	b.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00d      	beq.n	8002d1e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01a      	beq.n	8002d4a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
    }
    return;
 8002d1c:	e015      	b.n	8002d4a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d011      	beq.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fced 	bl	8003712 <UART_EndTransmit_IT>
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x3fc>
    return;
 8002d4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bad      	ldr	r3, [pc, #692]	; (8003074 <UART_SetConfig+0x2e0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa2      	ldr	r2, [pc, #648]	; (8003078 <UART_SetConfig+0x2e4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a99      	ldr	r2, [pc, #612]	; (800307c <UART_SetConfig+0x2e8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d121      	bne.n	8002e5e <UART_SetConfig+0xca>
 8002e1a:	4b99      	ldr	r3, [pc, #612]	; (8003080 <UART_SetConfig+0x2ec>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d817      	bhi.n	8002e58 <UART_SetConfig+0xc4>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x9c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e4d 	.word	0x08002e4d
 8002e38:	08002e47 	.word	0x08002e47
 8002e3c:	08002e53 	.word	0x08002e53
 8002e40:	2301      	movs	r3, #1
 8002e42:	76fb      	strb	r3, [r7, #27]
 8002e44:	e0e7      	b.n	8003016 <UART_SetConfig+0x282>
 8002e46:	2302      	movs	r3, #2
 8002e48:	76fb      	strb	r3, [r7, #27]
 8002e4a:	e0e4      	b.n	8003016 <UART_SetConfig+0x282>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	76fb      	strb	r3, [r7, #27]
 8002e50:	e0e1      	b.n	8003016 <UART_SetConfig+0x282>
 8002e52:	2308      	movs	r3, #8
 8002e54:	76fb      	strb	r3, [r7, #27]
 8002e56:	e0de      	b.n	8003016 <UART_SetConfig+0x282>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0db      	b.n	8003016 <UART_SetConfig+0x282>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a88      	ldr	r2, [pc, #544]	; (8003084 <UART_SetConfig+0x2f0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d132      	bne.n	8002ece <UART_SetConfig+0x13a>
 8002e68:	4b85      	ldr	r3, [pc, #532]	; (8003080 <UART_SetConfig+0x2ec>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d828      	bhi.n	8002ec8 <UART_SetConfig+0x134>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0xe8>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08002ec9 	.word	0x08002ec9
 8002e84:	08002ec9 	.word	0x08002ec9
 8002e88:	08002ec9 	.word	0x08002ec9
 8002e8c:	08002ebd 	.word	0x08002ebd
 8002e90:	08002ec9 	.word	0x08002ec9
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ec9 	.word	0x08002ec9
 8002e9c:	08002eb7 	.word	0x08002eb7
 8002ea0:	08002ec9 	.word	0x08002ec9
 8002ea4:	08002ec9 	.word	0x08002ec9
 8002ea8:	08002ec9 	.word	0x08002ec9
 8002eac:	08002ec3 	.word	0x08002ec3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	76fb      	strb	r3, [r7, #27]
 8002eb4:	e0af      	b.n	8003016 <UART_SetConfig+0x282>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	76fb      	strb	r3, [r7, #27]
 8002eba:	e0ac      	b.n	8003016 <UART_SetConfig+0x282>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	76fb      	strb	r3, [r7, #27]
 8002ec0:	e0a9      	b.n	8003016 <UART_SetConfig+0x282>
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	76fb      	strb	r3, [r7, #27]
 8002ec6:	e0a6      	b.n	8003016 <UART_SetConfig+0x282>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0a3      	b.n	8003016 <UART_SetConfig+0x282>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6d      	ldr	r2, [pc, #436]	; (8003088 <UART_SetConfig+0x2f4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d120      	bne.n	8002f1a <UART_SetConfig+0x186>
 8002ed8:	4b69      	ldr	r3, [pc, #420]	; (8003080 <UART_SetConfig+0x2ec>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ee2:	2b30      	cmp	r3, #48	; 0x30
 8002ee4:	d013      	beq.n	8002f0e <UART_SetConfig+0x17a>
 8002ee6:	2b30      	cmp	r3, #48	; 0x30
 8002ee8:	d814      	bhi.n	8002f14 <UART_SetConfig+0x180>
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d009      	beq.n	8002f02 <UART_SetConfig+0x16e>
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d810      	bhi.n	8002f14 <UART_SetConfig+0x180>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <UART_SetConfig+0x168>
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d006      	beq.n	8002f08 <UART_SetConfig+0x174>
 8002efa:	e00b      	b.n	8002f14 <UART_SetConfig+0x180>
 8002efc:	2300      	movs	r3, #0
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	e089      	b.n	8003016 <UART_SetConfig+0x282>
 8002f02:	2302      	movs	r3, #2
 8002f04:	76fb      	strb	r3, [r7, #27]
 8002f06:	e086      	b.n	8003016 <UART_SetConfig+0x282>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	76fb      	strb	r3, [r7, #27]
 8002f0c:	e083      	b.n	8003016 <UART_SetConfig+0x282>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	76fb      	strb	r3, [r7, #27]
 8002f12:	e080      	b.n	8003016 <UART_SetConfig+0x282>
 8002f14:	2310      	movs	r3, #16
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e07d      	b.n	8003016 <UART_SetConfig+0x282>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	; (800308c <UART_SetConfig+0x2f8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d120      	bne.n	8002f66 <UART_SetConfig+0x1d2>
 8002f24:	4b56      	ldr	r3, [pc, #344]	; (8003080 <UART_SetConfig+0x2ec>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f30:	d013      	beq.n	8002f5a <UART_SetConfig+0x1c6>
 8002f32:	2bc0      	cmp	r3, #192	; 0xc0
 8002f34:	d814      	bhi.n	8002f60 <UART_SetConfig+0x1cc>
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d009      	beq.n	8002f4e <UART_SetConfig+0x1ba>
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d810      	bhi.n	8002f60 <UART_SetConfig+0x1cc>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <UART_SetConfig+0x1b4>
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d006      	beq.n	8002f54 <UART_SetConfig+0x1c0>
 8002f46:	e00b      	b.n	8002f60 <UART_SetConfig+0x1cc>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	76fb      	strb	r3, [r7, #27]
 8002f4c:	e063      	b.n	8003016 <UART_SetConfig+0x282>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	76fb      	strb	r3, [r7, #27]
 8002f52:	e060      	b.n	8003016 <UART_SetConfig+0x282>
 8002f54:	2304      	movs	r3, #4
 8002f56:	76fb      	strb	r3, [r7, #27]
 8002f58:	e05d      	b.n	8003016 <UART_SetConfig+0x282>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	76fb      	strb	r3, [r7, #27]
 8002f5e:	e05a      	b.n	8003016 <UART_SetConfig+0x282>
 8002f60:	2310      	movs	r3, #16
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e057      	b.n	8003016 <UART_SetConfig+0x282>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a49      	ldr	r2, [pc, #292]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d125      	bne.n	8002fbc <UART_SetConfig+0x228>
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <UART_SetConfig+0x2ec>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7e:	d017      	beq.n	8002fb0 <UART_SetConfig+0x21c>
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	d817      	bhi.n	8002fb6 <UART_SetConfig+0x222>
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d00b      	beq.n	8002fa4 <UART_SetConfig+0x210>
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d811      	bhi.n	8002fb6 <UART_SetConfig+0x222>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <UART_SetConfig+0x20a>
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9a:	d006      	beq.n	8002faa <UART_SetConfig+0x216>
 8002f9c:	e00b      	b.n	8002fb6 <UART_SetConfig+0x222>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	76fb      	strb	r3, [r7, #27]
 8002fa2:	e038      	b.n	8003016 <UART_SetConfig+0x282>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	e035      	b.n	8003016 <UART_SetConfig+0x282>
 8002faa:	2304      	movs	r3, #4
 8002fac:	76fb      	strb	r3, [r7, #27]
 8002fae:	e032      	b.n	8003016 <UART_SetConfig+0x282>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	76fb      	strb	r3, [r7, #27]
 8002fb4:	e02f      	b.n	8003016 <UART_SetConfig+0x282>
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e02c      	b.n	8003016 <UART_SetConfig+0x282>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <UART_SetConfig+0x2e4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d125      	bne.n	8003012 <UART_SetConfig+0x27e>
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <UART_SetConfig+0x2ec>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd4:	d017      	beq.n	8003006 <UART_SetConfig+0x272>
 8002fd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fda:	d817      	bhi.n	800300c <UART_SetConfig+0x278>
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe0:	d00b      	beq.n	8002ffa <UART_SetConfig+0x266>
 8002fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe6:	d811      	bhi.n	800300c <UART_SetConfig+0x278>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <UART_SetConfig+0x260>
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d006      	beq.n	8003000 <UART_SetConfig+0x26c>
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x278>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	76fb      	strb	r3, [r7, #27]
 8002ff8:	e00d      	b.n	8003016 <UART_SetConfig+0x282>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	76fb      	strb	r3, [r7, #27]
 8002ffe:	e00a      	b.n	8003016 <UART_SetConfig+0x282>
 8003000:	2304      	movs	r3, #4
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	e007      	b.n	8003016 <UART_SetConfig+0x282>
 8003006:	2308      	movs	r3, #8
 8003008:	76fb      	strb	r3, [r7, #27]
 800300a:	e004      	b.n	8003016 <UART_SetConfig+0x282>
 800300c:	2310      	movs	r3, #16
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e001      	b.n	8003016 <UART_SetConfig+0x282>
 8003012:	2310      	movs	r3, #16
 8003014:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <UART_SetConfig+0x2e4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	f040 8087 	bne.w	8003130 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003022:	7efb      	ldrb	r3, [r7, #27]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d837      	bhi.n	8003098 <UART_SetConfig+0x304>
 8003028:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <UART_SetConfig+0x29c>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003055 	.word	0x08003055
 8003034:	08003099 	.word	0x08003099
 8003038:	0800305d 	.word	0x0800305d
 800303c:	08003099 	.word	0x08003099
 8003040:	08003063 	.word	0x08003063
 8003044:	08003099 	.word	0x08003099
 8003048:	08003099 	.word	0x08003099
 800304c:	08003099 	.word	0x08003099
 8003050:	0800306b 	.word	0x0800306b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003054:	f7fe fe0e 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8003058:	6178      	str	r0, [r7, #20]
        break;
 800305a:	e022      	b.n	80030a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <UART_SetConfig+0x300>)
 800305e:	617b      	str	r3, [r7, #20]
        break;
 8003060:	e01f      	b.n	80030a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003062:	f7fe fd6f 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8003066:	6178      	str	r0, [r7, #20]
        break;
 8003068:	e01b      	b.n	80030a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306e:	617b      	str	r3, [r7, #20]
        break;
 8003070:	e017      	b.n	80030a2 <UART_SetConfig+0x30e>
 8003072:	bf00      	nop
 8003074:	efff69f3 	.word	0xefff69f3
 8003078:	40008000 	.word	0x40008000
 800307c:	40013800 	.word	0x40013800
 8003080:	40021000 	.word	0x40021000
 8003084:	40004400 	.word	0x40004400
 8003088:	40004800 	.word	0x40004800
 800308c:	40004c00 	.word	0x40004c00
 8003090:	40005000 	.word	0x40005000
 8003094:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	76bb      	strb	r3, [r7, #26]
        break;
 80030a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80f1 	beq.w	800328c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d305      	bcc.n	80030c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d902      	bls.n	80030cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	76bb      	strb	r3, [r7, #26]
 80030ca:	e0df      	b.n	800328c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	020b      	lsls	r3, r1, #8
 80030de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030e2:	0202      	lsls	r2, r0, #8
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6849      	ldr	r1, [r1, #4]
 80030e8:	0849      	lsrs	r1, r1, #1
 80030ea:	4608      	mov	r0, r1
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	1814      	adds	r4, r2, r0
 80030f2:	eb43 0501 	adc.w	r5, r3, r1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	4620      	mov	r0, r4
 8003102:	4629      	mov	r1, r5
 8003104:	f7fd f860 	bl	80001c8 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003116:	d308      	bcc.n	800312a <UART_SetConfig+0x396>
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311e:	d204      	bcs.n	800312a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	e0b0      	b.n	800328c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	76bb      	strb	r3, [r7, #26]
 800312e:	e0ad      	b.n	800328c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d15c      	bne.n	80031f4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800313a:	7efb      	ldrb	r3, [r7, #27]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d828      	bhi.n	8003192 <UART_SetConfig+0x3fe>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x3b4>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003193 	.word	0x08003193
 8003158:	08003183 	.word	0x08003183
 800315c:	08003193 	.word	0x08003193
 8003160:	08003193 	.word	0x08003193
 8003164:	08003193 	.word	0x08003193
 8003168:	0800318b 	.word	0x0800318b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7fe fd82 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8003170:	6178      	str	r0, [r7, #20]
        break;
 8003172:	e013      	b.n	800319c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7fe fd94 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8003178:	6178      	str	r0, [r7, #20]
        break;
 800317a:	e00f      	b.n	800319c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317c:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <UART_SetConfig+0x510>)
 800317e:	617b      	str	r3, [r7, #20]
        break;
 8003180:	e00c      	b.n	800319c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7fe fcdf 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8003186:	6178      	str	r0, [r7, #20]
        break;
 8003188:	e008      	b.n	800319c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318e:	617b      	str	r3, [r7, #20]
        break;
 8003190:	e004      	b.n	800319c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	76bb      	strb	r3, [r7, #26]
        break;
 800319a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d074      	beq.n	800328c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005a      	lsls	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d916      	bls.n	80031ee <UART_SetConfig+0x45a>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d212      	bcs.n	80031ee <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	b29a      	uxth	r2, r3
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	89fa      	ldrh	r2, [r7, #14]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	e04e      	b.n	800328c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	76bb      	strb	r3, [r7, #26]
 80031f2:	e04b      	b.n	800328c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f4:	7efb      	ldrb	r3, [r7, #27]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d827      	bhi.n	800324a <UART_SetConfig+0x4b6>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x46c>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003225 	.word	0x08003225
 8003204:	0800322d 	.word	0x0800322d
 8003208:	08003235 	.word	0x08003235
 800320c:	0800324b 	.word	0x0800324b
 8003210:	0800323b 	.word	0x0800323b
 8003214:	0800324b 	.word	0x0800324b
 8003218:	0800324b 	.word	0x0800324b
 800321c:	0800324b 	.word	0x0800324b
 8003220:	08003243 	.word	0x08003243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7fe fd26 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8003228:	6178      	str	r0, [r7, #20]
        break;
 800322a:	e013      	b.n	8003254 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7fe fd38 	bl	8001ca0 <HAL_RCC_GetPCLK2Freq>
 8003230:	6178      	str	r0, [r7, #20]
        break;
 8003232:	e00f      	b.n	8003254 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <UART_SetConfig+0x510>)
 8003236:	617b      	str	r3, [r7, #20]
        break;
 8003238:	e00c      	b.n	8003254 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323a:	f7fe fc83 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 800323e:	6178      	str	r0, [r7, #20]
        break;
 8003240:	e008      	b.n	8003254 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	617b      	str	r3, [r7, #20]
        break;
 8003248:	e004      	b.n	8003254 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	76bb      	strb	r3, [r7, #26]
        break;
 8003252:	bf00      	nop
    }

    if (pclk != 0U)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	085a      	lsrs	r2, r3, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	b29b      	uxth	r3, r3
 800326e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	d908      	bls.n	8003288 <UART_SetConfig+0x4f4>
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d204      	bcs.n	8003288 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e001      	b.n	800328c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003298:	7ebb      	ldrb	r3, [r7, #26]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bdb0      	pop	{r4, r5, r7, pc}
 80032a2:	bf00      	nop
 80032a4:	00f42400 	.word	0x00f42400

080032a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a6:	d10a      	bne.n	80033be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033fc:	f7fd fb30 	bl	8000a60 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d10e      	bne.n	800342e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f82d 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e023      	b.n	8003476 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d10e      	bne.n	800345a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800343c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f817 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e00d      	b.n	8003476 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	e05e      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d05a      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fd fae2 	bl	8000a60 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <UART_WaitOnFlagUntilTimeout+0x30>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11b      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e043      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d02c      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d124      	bne.n	800354e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800351c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e00f      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	429a      	cmp	r2, r3
 800356a:	d091      	beq.n	8003490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	d10e      	bne.n	80035ca <UART_Start_Receive_IT+0x52>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <UART_Start_Receive_IT+0x48>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035be:	e02d      	b.n	800361c <UART_Start_Receive_IT+0xa4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	22ff      	movs	r2, #255	; 0xff
 80035c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c8:	e028      	b.n	800361c <UART_Start_Receive_IT+0xa4>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <UART_Start_Receive_IT+0x76>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <UART_Start_Receive_IT+0x6c>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035e2:	e01b      	b.n	800361c <UART_Start_Receive_IT+0xa4>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	227f      	movs	r2, #127	; 0x7f
 80035e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ec:	e016      	b.n	800361c <UART_Start_Receive_IT+0xa4>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d10d      	bne.n	8003614 <UART_Start_Receive_IT+0x9c>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d104      	bne.n	800360a <UART_Start_Receive_IT+0x92>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	227f      	movs	r2, #127	; 0x7f
 8003604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003608:	e008      	b.n	800361c <UART_Start_Receive_IT+0xa4>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	223f      	movs	r2, #63	; 0x3f
 800360e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003612:	e003      	b.n	800361c <UART_Start_Receive_IT+0xa4>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2222      	movs	r2, #34	; 0x22
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	d107      	bne.n	8003654 <UART_Start_Receive_IT+0xdc>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <UART_Start_Receive_IT+0x108>)
 8003650:	665a      	str	r2, [r3, #100]	; 0x64
 8003652:	e002      	b.n	800365a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <UART_Start_Receive_IT+0x10c>)
 8003658:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003670:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	0800381d 	.word	0x0800381d
 8003684:	08003745 	.word	0x08003745

08003688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800369e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0210 	bic.w	r2, r2, #16
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fb2f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003728:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fb0c 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003752:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003758:	2b22      	cmp	r3, #34	; 0x22
 800375a:	d151      	bne.n	8003800 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003762:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003764:	89bb      	ldrh	r3, [r7, #12]
 8003766:	b2d9      	uxtb	r1, r3
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	400a      	ands	r2, r1
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d13a      	bne.n	8003814 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10f      	bne.n	80037f2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0210 	bic.w	r2, r2, #16
 80037e0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fac6 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
 80037f0:	e002      	b.n	80037f8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fc fe64 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037fe:	e009      	b.n	8003814 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	8b1b      	ldrh	r3, [r3, #24]
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0208 	orr.w	r2, r2, #8
 8003810:	b292      	uxth	r2, r2
 8003812:	831a      	strh	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800382a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003830:	2b22      	cmp	r3, #34	; 0x22
 8003832:	d151      	bne.n	80038d8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800383a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003842:	89ba      	ldrh	r2, [r7, #12]
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	4013      	ands	r3, r2
 8003848:	b29a      	uxth	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d13a      	bne.n	80038ec <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003884:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10f      	bne.n	80038ca <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fa5a 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
 80038c8:	e002      	b.n	80038d0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fc fdf8 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038d6:	e009      	b.n	80038ec <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	8b1b      	ldrh	r3, [r3, #24]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0208 	orr.w	r2, r2, #8
 80038e8:	b292      	uxth	r2, r2
 80038ea:	831a      	strh	r2, [r3, #24]
}
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4d0d      	ldr	r5, [pc, #52]	; (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2600      	movs	r6, #0
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4d0b      	ldr	r5, [pc, #44]	; (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	; (800394c <__libc_init_array+0x44>)
 800391c:	f000 f820 	bl	8003960 <_init>
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2600      	movs	r6, #0
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	080039c8 	.word	0x080039c8
 8003944:	080039c8 	.word	0x080039c8
 8003948:	080039c8 	.word	0x080039c8
 800394c:	080039cc 	.word	0x080039cc

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
