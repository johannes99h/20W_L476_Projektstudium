
L476_211101_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d7c  08003d7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  08003d90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003d90  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212f  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000339e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273bf  00000000  00000000  000347e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001012f  00000000  00000000  0005bba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e2f  00000000  00000000  0006bcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015fb05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e28  00000000  00000000  0015fb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d14 	.word	0x08003d14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d14 	.word	0x08003d14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fae7 	bl	8000a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f80d 	bl	80004e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f944 	bl	8000758 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 f924 	bl	800071c <MX_DMA_Init>
  MX_UART4_Init();
 80004d4:	f000 f8c2 	bl	800065c <MX_UART4_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f8f0 	bl	80006bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004dc:	f000 f86a 	bl	80005b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80004e0:	f000 faa2 	bl	8000a28 <setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x24>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b0b8      	sub	sp, #224	; 0xe0
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004f0:	2244      	movs	r2, #68	; 0x44
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 fc05 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2288      	movs	r2, #136	; 0x88
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f003 fbf7 	bl	8003d04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	2310      	movs	r3, #16
 8000518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000528:	2360      	movs	r3, #96	; 0x60
 800052a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000538:	4618      	mov	r0, r3
 800053a:	f001 f839 	bl	80015b0 <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000544:	f000 f920 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	230f      	movs	r3, #15
 800054a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fc05 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000578:	f000 f906 	bl	8000788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 800057c:	230a      	movs	r3, #10
 800057e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000584:	2300      	movs	r3, #0
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fdfc 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000596:	f000 f8f7 	bl	8000788 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059e:	f000 ffb1 	bl	8001504 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005a8:	f000 f8ee 	bl	8000788 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	37e0      	adds	r7, #224	; 0xe0
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <MX_TIM1_Init+0xa4>)
 80005d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_TIM1_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <MX_TIM1_Init+0xa0>)
 8000600:	f002 fa7e 	bl	8002b00 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800060a:	f000 f8bd 	bl	8000788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <MX_TIM1_Init+0xa0>)
 800061c:	f002 fac7 	bl	8002bae <HAL_TIM_ConfigClockSource>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000626:	f000 f8af 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_TIM1_Init+0xa0>)
 800063c:	f002 fcb2 	bl	8002fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000646:	f000 f89f 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	3720      	adds	r7, #32
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000d4 	.word	0x200000d4
 8000658:	40012c00 	.word	0x40012c00

0800065c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_UART4_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_UART4_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2400;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_UART4_Init+0x58>)
 8000668:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800066c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_UART4_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_UART4_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_UART4_Init+0x58>)
 800067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000680:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_UART4_Init+0x58>)
 8000684:	220c      	movs	r2, #12
 8000686:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_UART4_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_UART4_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_UART4_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_UART4_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_UART4_Init+0x58>)
 80006a2:	f002 fd07 	bl	80030b4 <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80006ac:	f000 f86c 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000120 	.word	0x20000120
 80006b8:	40004c00 	.word	0x40004c00

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART2_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e4:	220c      	movs	r2, #12
 80006e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_USART2_UART_Init+0x58>)
 8000702:	f002 fcd7 	bl	80030b4 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 800070c:	f000 f83c 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001a4 	.word	0x200001a4
 8000718:	40004400 	.word	0x40004400

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_DMA_Init+0x38>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <MX_DMA_Init+0x38>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6493      	str	r3, [r2, #72]	; 0x48
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_DMA_Init+0x38>)
 8000730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	203c      	movs	r0, #60	; 0x3c
 8000740:	f000 faf9 	bl	8000d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000744:	203c      	movs	r0, #60	; 0x3c
 8000746:	f000 fb12 	bl	8000d6e <HAL_NVIC_EnableIRQ>

}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_GPIO_Init+0x2c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <MX_GPIO_Init+0x2c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0x2c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	; 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_TIM_Base_MspInit+0x38>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d10b      	bne.n	8000806 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_TIM_Base_MspInit+0x3c>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <HAL_TIM_Base_MspInit+0x3c>)
 80007f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <HAL_TIM_Base_MspInit+0x3c>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40012c00 	.word	0x40012c00
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a43      	ldr	r2, [pc, #268]	; (8000948 <HAL_UART_MspInit+0x12c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d152      	bne.n	80008e4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800083e:	4b43      	ldr	r3, [pc, #268]	; (800094c <HAL_UART_MspInit+0x130>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a42      	ldr	r2, [pc, #264]	; (800094c <HAL_UART_MspInit+0x130>)
 8000844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b40      	ldr	r3, [pc, #256]	; (800094c <HAL_UART_MspInit+0x130>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b3d      	ldr	r3, [pc, #244]	; (800094c <HAL_UART_MspInit+0x130>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a3c      	ldr	r2, [pc, #240]	; (800094c <HAL_UART_MspInit+0x130>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <HAL_UART_MspInit+0x130>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 800086e:	2303      	movs	r3, #3
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800087e:	2308      	movs	r3, #8
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fc82 	bl	8001194 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <HAL_UART_MspInit+0x134>)
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <HAL_UART_MspInit+0x138>)
 8000894:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_UART_MspInit+0x134>)
 8000898:	2202      	movs	r2, #2
 800089a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <HAL_UART_MspInit+0x134>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008bc:	2220      	movs	r2, #32
 80008be:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008c8:	f000 fa6c 	bl	8000da4 <HAL_DMA_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80008d2:	f7ff ff59 	bl	8000788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008da:	671a      	str	r2, [r3, #112]	; 0x70
 80008dc:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <HAL_UART_MspInit+0x134>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	e02d      	b.n	8000940 <HAL_UART_MspInit+0x124>
  else if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <HAL_UART_MspInit+0x13c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d128      	bne.n	8000940 <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_UART_MspInit+0x130>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <HAL_UART_MspInit+0x130>)
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_UART_MspInit+0x130>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x130>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x130>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x130>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 800091e:	230c      	movs	r3, #12
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f000 fc2a 	bl	8001194 <HAL_GPIO_Init>
}
 8000940:	bf00      	nop
 8000942:	3730      	adds	r7, #48	; 0x30
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004c00 	.word	0x40004c00
 800094c:	40021000 	.word	0x40021000
 8000950:	2000008c 	.word	0x2000008c
 8000954:	40020458 	.word	0x40020458
 8000958:	40004400 	.word	0x40004400

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f8ca 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <DMA2_Channel5_IRQHandler+0x10>)
 80009b6:	f000 fb0d 	bl	8000fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000008c 	.word	0x2000008c

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <SystemInit+0x5c>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <SystemInit+0x5c>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <SystemInit+0x60>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <SystemInit+0x60>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <SystemInit+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <SystemInit+0x60>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <SystemInit+0x60>)
 80009f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <SystemInit+0x60>)
 80009fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <SystemInit+0x60>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <SystemInit+0x60>)
 8000a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SystemInit+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	40021000 	.word	0x40021000

08000a28 <setup>:
{
	tx(buffRx);
}

void setup()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart4, (uint8_t *)buffRx, sizeof(buffRx));
 8000a2c:	2264      	movs	r2, #100	; 0x64
 8000a2e:	4903      	ldr	r1, [pc, #12]	; (8000a3c <setup+0x14>)
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <setup+0x18>)
 8000a32:	f002 fb8d 	bl	8003150 <HAL_UART_Receive_DMA>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000028 	.word	0x20000028
 8000a40:	20000120 	.word	0x20000120

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff ffbc 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a4e:	e003      	b.n	8000a58 <LoopCopyDataInit>

08000a50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a56:	3104      	adds	r1, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a60:	d3f6      	bcc.n	8000a50 <CopyDataInit>
	ldr	r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a64:	e002      	b.n	8000a6c <LoopFillZerobss>

08000a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a68:	f842 3b04 	str.w	r3, [r2], #4

08000a6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <LoopForever+0x16>)
	cmp	r2, r3
 8000a6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a70:	d3f9      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 f923 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fd23 	bl	80004c0 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a80:	08003d84 	.word	0x08003d84
	ldr	r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a88:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a90:	2000022c 	.word	0x2000022c

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>

08000a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f93d 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f80e 	bl	8000ac8 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	e001      	b.n	8000abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab8:	f7ff fe6c 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_InitTick+0x6c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d023      	beq.n	8000b24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_InitTick+0x70>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x6c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f949 	bl	8000d8a <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10f      	bne.n	8000b1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d809      	bhi.n	8000b18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f913 	bl	8000d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_InitTick+0x74>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e007      	b.n	8000b28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e001      	b.n	8000b28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000228 	.word	0x20000228

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000228 	.word	0x20000228

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e098      	b.n	8000ee8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <HAL_DMA_Init+0x150>)
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d80f      	bhi.n	8000de2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <HAL_DMA_Init+0x154>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <HAL_DMA_Init+0x158>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	009a      	lsls	r2, r3, #2
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a48      	ldr	r2, [pc, #288]	; (8000f00 <HAL_DMA_Init+0x15c>)
 8000dde:	641a      	str	r2, [r3, #64]	; 0x40
 8000de0:	e00e      	b.n	8000e00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <HAL_DMA_Init+0x160>)
 8000dea:	4413      	add	r3, r2
 8000dec:	4a43      	ldr	r2, [pc, #268]	; (8000efc <HAL_DMA_Init+0x158>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	009a      	lsls	r2, r3, #2
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a42      	ldr	r2, [pc, #264]	; (8000f08 <HAL_DMA_Init+0x164>)
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2202      	movs	r2, #2
 8000e04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e5a:	d039      	beq.n	8000ed0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_DMA_Init+0x15c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d11a      	bne.n	8000e9c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <HAL_DMA_Init+0x168>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f003 031c 	and.w	r3, r3, #28
 8000e72:	210f      	movs	r1, #15
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4924      	ldr	r1, [pc, #144]	; (8000f0c <HAL_DMA_Init+0x168>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_DMA_Init+0x168>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6859      	ldr	r1, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	f003 031c 	and.w	r3, r3, #28
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	491d      	ldr	r1, [pc, #116]	; (8000f0c <HAL_DMA_Init+0x168>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
 8000e9a:	e019      	b.n	8000ed0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_DMA_Init+0x16c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	f003 031c 	and.w	r3, r3, #28
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4917      	ldr	r1, [pc, #92]	; (8000f10 <HAL_DMA_Init+0x16c>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_DMA_Init+0x16c>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6859      	ldr	r1, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f003 031c 	and.w	r3, r3, #28
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	4911      	ldr	r1, [pc, #68]	; (8000f10 <HAL_DMA_Init+0x16c>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40020407 	.word	0x40020407
 8000ef8:	bffdfff8 	.word	0xbffdfff8
 8000efc:	cccccccd 	.word	0xcccccccd
 8000f00:	40020000 	.word	0x40020000
 8000f04:	bffdfbf8 	.word	0xbffdfbf8
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	400200a8 	.word	0x400200a8
 8000f10:	400204a8 	.word	0x400204a8

08000f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <HAL_DMA_Start_IT+0x20>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e04b      	b.n	8000fcc <HAL_DMA_Start_IT+0xb8>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d13a      	bne.n	8000fbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f8e0 	bl	8001132 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d008      	beq.n	8000f8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 020e 	orr.w	r2, r2, #14
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e00f      	b.n	8000fac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0204 	bic.w	r2, r2, #4
 8000f9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 020a 	orr.w	r2, r2, #10
 8000faa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e005      	b.n	8000fca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	f003 031c 	and.w	r3, r3, #28
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d026      	beq.n	800104e <HAL_DMA_IRQHandler+0x7a>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	2b00      	cmp	r3, #0
 8001008:	d021      	beq.n	800104e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	2b00      	cmp	r3, #0
 8001016:	d107      	bne.n	8001028 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0204 	bic.w	r2, r2, #4
 8001026:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 021c 	and.w	r2, r3, #28
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	2104      	movs	r1, #4
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	2b00      	cmp	r3, #0
 8001042:	d071      	beq.n	8001128 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800104c:	e06c      	b.n	8001128 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 031c 	and.w	r3, r3, #28
 8001056:	2202      	movs	r2, #2
 8001058:	409a      	lsls	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02e      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xec>
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d029      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020a 	bic.w	r2, r2, #10
 8001088:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 021c 	and.w	r2, r3, #28
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2102      	movs	r1, #2
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d038      	beq.n	8001128 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010be:	e033      	b.n	8001128 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	f003 031c 	and.w	r3, r3, #28
 80010c8:	2208      	movs	r2, #8
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d02a      	beq.n	800112a <HAL_DMA_IRQHandler+0x156>
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d025      	beq.n	800112a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 020e 	bic.w	r2, r2, #14
 80010ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f003 021c 	and.w	r2, r3, #28
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	2b00      	cmp	r3, #0
 800111e:	d004      	beq.n	800112a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001128:	bf00      	nop
 800112a:	bf00      	nop
}
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001132:	b480      	push	{r7}
 8001134:	b085      	sub	sp, #20
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	f003 021c 	and.w	r2, r3, #28
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2101      	movs	r1, #1
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b10      	cmp	r3, #16
 8001162:	d108      	bne.n	8001176 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001174:	e007      	b.n	8001186 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	60da      	str	r2, [r3, #12]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e17f      	b.n	80014a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8171 	beq.w	800149e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d00b      	beq.n	80011dc <HAL_GPIO_Init+0x48>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	2b11      	cmp	r3, #17
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b03      	cmp	r3, #3
 8001248:	d118      	bne.n	800127c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x128>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d123      	bne.n	8001304 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	6939      	ldr	r1, [r7, #16]
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80ac 	beq.w	800149e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	4a5e      	ldr	r2, [pc, #376]	; (80014c4 <HAL_GPIO_Init+0x330>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6613      	str	r3, [r2, #96]	; 0x60
 8001352:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135e:	4a5a      	ldr	r2, [pc, #360]	; (80014c8 <HAL_GPIO_Init+0x334>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001388:	d025      	beq.n	80013d6 <HAL_GPIO_Init+0x242>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x338>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d01f      	beq.n	80013d2 <HAL_GPIO_Init+0x23e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_GPIO_Init+0x33c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d019      	beq.n	80013ce <HAL_GPIO_Init+0x23a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_GPIO_Init+0x340>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x236>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x344>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x232>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x348>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x22e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x34c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x22a>
 80013ba:	2306      	movs	r3, #6
 80013bc:	e00c      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013be:	2307      	movs	r3, #7
 80013c0:	e00a      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013c2:	2305      	movs	r3, #5
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x244>
 80013d6:	2300      	movs	r3, #0
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e8:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_GPIO_Init+0x334>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_GPIO_Init+0x350>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141a:	4a32      	ldr	r2, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x350>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_GPIO_Init+0x350>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_GPIO_Init+0x350>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_GPIO_Init+0x350>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x350>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_GPIO_Init+0x350>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <HAL_GPIO_Init+0x350>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa22 f303 	lsr.w	r3, r2, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f47f ae78 	bne.w	80011a4 <HAL_GPIO_Init+0x10>
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000c00 	.word	0x48000c00
 80014d8:	48001000 	.word	0x48001000
 80014dc:	48001400 	.word	0x48001400
 80014e0:	48001800 	.word	0x48001800
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001512:	d130      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001520:	d038      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2232      	movs	r2, #50	; 0x32
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	e002      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155c:	d102      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f2      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d110      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00f      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d007      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e3d4      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4ba1      	ldr	r3, [pc, #644]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015cc:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80e4 	beq.w	80017ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_RCC_OscConfig+0x4a>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	f040 808b 	bne.w	8001708 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f040 8087 	bne.w	8001708 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fa:	4b93      	ldr	r3, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x62>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e3ac      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <HAL_RCC_OscConfig+0x7c>
 8001622:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162a:	e005      	b.n	8001638 <HAL_RCC_OscConfig+0x88>
 800162c:	4b86      	ldr	r3, [pc, #536]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001638:	4293      	cmp	r3, r2
 800163a:	d223      	bcs.n	8001684 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fd41 	bl	80020c8 <RCC_SetFlashLatencyFromMSIRange>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e38d      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001650:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a7c      	ldr	r2, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4977      	ldr	r1, [pc, #476]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	4972      	ldr	r1, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
 8001682:	e025      	b.n	80016d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001684:	4b70      	ldr	r3, [pc, #448]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6f      	ldr	r2, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	496a      	ldr	r1, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	4b69      	ldr	r3, [pc, #420]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4965      	ldr	r1, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fd01 	bl	80020c8 <RCC_SetFlashLatencyFromMSIRange>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e34d      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d0:	f000 fc36 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	495a      	ldr	r1, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x29c>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x2a0>)
 80016ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_RCC_OscConfig+0x2a4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f9e7 	bl	8000ac8 <HAL_InitTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d052      	beq.n	80017aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	e331      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d032      	beq.n	8001776 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001710:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa24 	bl	8000b68 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001724:	f7ff fa20 	bl	8000b68 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e31a      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001736:	4b44      	ldr	r3, [pc, #272]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a40      	ldr	r2, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	493b      	ldr	r1, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	4936      	ldr	r1, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	e01a      	b.n	80017ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001782:	f7ff f9f1 	bl	8000b68 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178a:	f7ff f9ed 	bl	8000b68 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e2e7      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x1da>
 80017a8:	e000      	b.n	80017ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d074      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x21a>
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d10e      	bne.n	80017e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d10b      	bne.n	80017e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d064      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d160      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e2c4      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x24a>
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e01d      	b.n	8001836 <HAL_RCC_OscConfig+0x286>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001802:	d10c      	bne.n	800181e <HAL_RCC_OscConfig+0x26e>
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x286>
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_RCC_OscConfig+0x298>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01c      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff f993 	bl	8000b68 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001844:	e011      	b.n	800186a <HAL_RCC_OscConfig+0x2ba>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	08003d2c 	.word	0x08003d2c
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f986 	bl	8000b68 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e280      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4baf      	ldr	r3, [pc, #700]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2a8>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f976 	bl	8000b68 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f972 	bl	8000b68 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e26c      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	4ba5      	ldr	r3, [pc, #660]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d0>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d060      	beq.n	8001970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x310>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c0:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x328>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e249      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b93      	ldr	r3, [pc, #588]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4990      	ldr	r1, [pc, #576]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	e040      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d023      	beq.n	800193e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b8c      	ldr	r3, [pc, #560]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a8b      	ldr	r2, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f931 	bl	8000b68 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff f92d 	bl	8000b68 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e227      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	497c      	ldr	r1, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b7a      	ldr	r3, [pc, #488]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a79      	ldr	r2, [pc, #484]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f90d 	bl	8000b68 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff f909 	bl	8000b68 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e203      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	4a67      	ldr	r2, [pc, #412]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f8e8 	bl	8000b68 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff f8e4 	bl	8000b68 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1de      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x3ec>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff f8cb 	bl	8000b68 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff f8c7 	bl	8000b68 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1c1      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80a6 	beq.w	8001b50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b3e      	ldr	r3, [pc, #248]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d118      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3a      	ldr	r2, [pc, #232]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f88e 	bl	8000b68 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff f88a 	bl	8000b68 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e184      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x57c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d8>
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a86:	e024      	b.n	8001ad2 <HAL_RCC_OscConfig+0x522>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d110      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x502>
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	e00f      	b.n	8001ad2 <HAL_RCC_OscConfig+0x522>
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff f845 	bl	8000b68 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff f841 	bl	8000b68 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e139      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x578>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ed      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x532>
 8001b06:	e01a      	b.n	8001b3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f82e 	bl	8000b68 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f82a 	bl	8000b68 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d906      	bls.n	8001b30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e122      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b30:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e8      	bne.n	8001b10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a8a      	ldr	r2, [pc, #552]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 8108 	beq.w	8001d6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	f040 80d0 	bne.w	8001d04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b64:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d130      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	3b01      	subs	r3, #1
 8001b84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d127      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d11f      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba4:	2a07      	cmp	r2, #7
 8001ba6:	bf14      	ite	ne
 8001ba8:	2201      	movne	r2, #1
 8001baa:	2200      	moveq	r2, #0
 8001bac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d113      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d06e      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d069      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001be0:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b7      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c08:	f7fe ffae 	bl	8000b68 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe ffaa 	bl	8000b68 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0a4      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2e:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <HAL_RCC_OscConfig+0x7c8>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c3e:	3a01      	subs	r2, #1
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c48:	0212      	lsls	r2, r2, #8
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c50:	0852      	lsrs	r2, r2, #1
 8001c52:	3a01      	subs	r2, #1
 8001c54:	0552      	lsls	r2, r2, #21
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c5c:	0852      	lsrs	r2, r2, #1
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0652      	lsls	r2, r2, #25
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c68:	0912      	lsrs	r2, r2, #4
 8001c6a:	0452      	lsls	r2, r2, #17
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	4941      	ldr	r1, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c74:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3e      	ldr	r2, [pc, #248]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c80:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c8c:	f7fe ff6c 	bl	8000b68 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe ff68 	bl	8000b68 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e062      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb2:	e05a      	b.n	8001d6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e059      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d152      	bne.n	8001d6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cdc:	f7fe ff44 	bl	8000b68 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff40 	bl	8000b68 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e03a      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x734>
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d02d      	beq.n	8001d66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d28:	f023 0303 	bic.w	r3, r3, #3
 8001d2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7fe ff13 	bl	8000b68 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7fe ff0f 	bl	8000b68 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e009      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x796>
 8001d64:	e001      	b.n	8001d6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	f99d808c 	.word	0xf99d808c

08001d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0c8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4961      	ldr	r1, [pc, #388]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b0      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d04c      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd4:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d121      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e09e      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d115      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e092      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e04:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e086      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e07e      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 0203 	bic.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e36:	f7fe fe97 	bl	8000b68 <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7fe fe93 	bl	8000b68 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e066      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 020c 	and.w	r2, r3, #12
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d1eb      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	492c      	ldr	r1, [pc, #176]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d210      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4924      	ldr	r1, [pc, #144]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_RCC_ClockConfig+0x1b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e036      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4918      	ldr	r1, [pc, #96]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4910      	ldr	r1, [pc, #64]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef2:	f000 f825 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490c      	ldr	r1, [pc, #48]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fdd6 	bl	8000ac8 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003d2c 	.word	0x08003d2c
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x34>
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d121      	bne.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d11e      	bne.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f80:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e005      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	; (800204c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	e004      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d134      	bne.n	8002038 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d003      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0xac>
 8001fe4:	e005      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fe8:	617b      	str	r3, [r7, #20]
      break;
 8001fea:	e005      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fee:	617b      	str	r3, [r7, #20]
      break;
 8001ff0:	e002      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	617b      	str	r3, [r7, #20]
      break;
 8001ff6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	3301      	adds	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	fb02 f203 	mul.w	r2, r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0e5b      	lsrs	r3, r3, #25
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	3301      	adds	r3, #1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002038:	69bb      	ldr	r3, [r7, #24]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	08003d44 	.word	0x08003d44
 8002050:	00f42400 	.word	0x00f42400
 8002054:	007a1200 	.word	0x007a1200

08002058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_RCC_GetHCLKFreq+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000

08002070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002074:	f7ff fff0 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08003d3c 	.word	0x08003d3c

0800209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a0:	f7ff ffda 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0adb      	lsrs	r3, r3, #11
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4904      	ldr	r1, [pc, #16]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08003d3c 	.word	0x08003d3c

080020c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020e0:	f7ff fa02 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 80020e4:	6178      	str	r0, [r7, #20]
 80020e6:	e014      	b.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6593      	str	r3, [r2, #88]	; 0x58
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002100:	f7ff f9f2 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 8002104:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d10b      	bne.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d919      	bls.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2ba0      	cmp	r3, #160	; 0xa0
 8002124:	d902      	bls.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002126:	2302      	movs	r3, #2
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e013      	b.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800212c:	2301      	movs	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	e010      	b.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d902      	bls.n	800213e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002138:	2303      	movs	r3, #3
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	e00a      	b.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d102      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002144:	2302      	movs	r3, #2
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e004      	b.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b70      	cmp	r3, #112	; 0x70
 800214e:	d101      	bne.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002150:	2301      	movs	r3, #1
 8002152:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 0207 	bic.w	r2, r3, #7
 800215c:	4909      	ldr	r1, [pc, #36]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	40022000 	.word	0x40022000

08002188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002190:	2300      	movs	r3, #0
 8002192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002194:	2300      	movs	r3, #0
 8002196:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d041      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ac:	d02a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b2:	d824      	bhi.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021b8:	d008      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021be:	d81e      	bhi.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c8:	d010      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021ca:	e018      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a85      	ldr	r2, [pc, #532]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d8:	e015      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3304      	adds	r3, #4
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fabb 	bl	800275c <RCCEx_PLLSAI1_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ea:	e00c      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3320      	adds	r3, #32
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fba6 	bl	8002944 <RCCEx_PLLSAI2_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021fc:	e003      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	74fb      	strb	r3, [r7, #19]
      break;
 8002202:	e000      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002204:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221a:	4973      	ldr	r1, [pc, #460]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002222:	e001      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d041      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002238:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800223c:	d02a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800223e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002242:	d824      	bhi.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002248:	d008      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800224a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800224e:	d81e      	bhi.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d010      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800225a:	e018      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800225c:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a61      	ldr	r2, [pc, #388]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002266:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002268:	e015      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fa73 	bl	800275c <RCCEx_PLLSAI1_Config>
 8002276:	4603      	mov	r3, r0
 8002278:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800227a:	e00c      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3320      	adds	r3, #32
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fb5e 	bl	8002944 <RCCEx_PLLSAI2_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800228c:	e003      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	74fb      	strb	r3, [r7, #19]
      break;
 8002292:	e000      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10b      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800229c:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022aa:	494f      	ldr	r1, [pc, #316]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022b2:	e001      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a0 	beq.w	8002406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e0:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ea:	6593      	str	r3, [r2, #88]	; 0x58
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f8:	2301      	movs	r3, #1
 80022fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a3a      	ldr	r2, [pc, #232]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002308:	f7fe fc2e 	bl	8000b68 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800230e:	e009      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002310:	f7fe fc2a 	bl	8000b68 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d902      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	74fb      	strb	r3, [r7, #19]
        break;
 8002322:	e005      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ef      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d15c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002340:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01f      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	d019      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002354:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fbe9 	bl	8000b68 <HAL_GetTick>
 8002396:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002398:	e00b      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fbe5 	bl	8000b68 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d902      	bls.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	74fb      	strb	r3, [r7, #19]
            break;
 80023b0:	e006      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ec      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d6:	4904      	ldr	r1, [pc, #16]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023de:	e009      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
 80023e4:	e006      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f4:	7c7b      	ldrb	r3, [r7, #17]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b9e      	ldr	r3, [pc, #632]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a9d      	ldr	r2, [pc, #628]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002412:	4b98      	ldr	r3, [pc, #608]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f023 0203 	bic.w	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	4994      	ldr	r1, [pc, #592]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002434:	4b8f      	ldr	r3, [pc, #572]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f023 020c 	bic.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002442:	498c      	ldr	r1, [pc, #560]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002456:	4b87      	ldr	r3, [pc, #540]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4983      	ldr	r1, [pc, #524]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002478:	4b7e      	ldr	r3, [pc, #504]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	497b      	ldr	r1, [pc, #492]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a8:	4972      	ldr	r1, [pc, #456]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024bc:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	496a      	ldr	r1, [pc, #424]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024de:	4b65      	ldr	r3, [pc, #404]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	4961      	ldr	r1, [pc, #388]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002500:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	4959      	ldr	r1, [pc, #356]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002522:	4b54      	ldr	r3, [pc, #336]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	4950      	ldr	r1, [pc, #320]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	4948      	ldr	r1, [pc, #288]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002566:	4b43      	ldr	r3, [pc, #268]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	493f      	ldr	r1, [pc, #252]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d028      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002588:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002596:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d106      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	e011      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025be:	d10c      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	2101      	movs	r1, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f8c8 	bl	800275c <RCCEx_PLLSAI1_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d028      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	491f      	ldr	r1, [pc, #124]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002604:	d106      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002610:	60d3      	str	r3, [r2, #12]
 8002612:	e011      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800261c:	d10c      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	2101      	movs	r1, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f899 	bl	800275c <RCCEx_PLLSAI1_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d02b      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002662:	d109      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a02      	ldr	r2, [pc, #8]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266e:	60d3      	str	r3, [r2, #12]
 8002670:	e014      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002680:	d10c      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f867 	bl	800275c <RCCEx_PLLSAI1_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d02f      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b6:	4928      	ldr	r1, [pc, #160]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3304      	adds	r3, #4
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f844 	bl	800275c <RCCEx_PLLSAI1_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d014      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	74bb      	strb	r3, [r7, #18]
 80026e2:	e011      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3320      	adds	r3, #32
 80026f2:	2102      	movs	r1, #2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f925 	bl	8002944 <RCCEx_PLLSAI2_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002722:	490d      	ldr	r1, [pc, #52]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002746:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800274e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800276a:	4b75      	ldr	r3, [pc, #468]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0203 	and.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d10d      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
       ||
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800278e:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
       ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d047      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e044      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d018      	beq.n	80027e2 <RCCEx_PLLSAI1_Config+0x86>
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d825      	bhi.n	8002800 <RCCEx_PLLSAI1_Config+0xa4>
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d002      	beq.n	80027be <RCCEx_PLLSAI1_Config+0x62>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d009      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0x74>
 80027bc:	e020      	b.n	8002800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027be:	4b60      	ldr	r3, [pc, #384]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11d      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ce:	e01a      	b.n	8002806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d0:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d116      	bne.n	800280a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e013      	b.n	800280a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ee:	4b54      	ldr	r3, [pc, #336]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027fe:	e006      	b.n	800280e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e004      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002806:	bf00      	nop
 8002808:	e002      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	430b      	orrs	r3, r1
 800282c:	4944      	ldr	r1, [pc, #272]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d17d      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a40      	ldr	r2, [pc, #256]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fe f990 	bl	8000b68 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800284a:	e009      	b.n	8002860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800284c:	f7fe f98c 	bl	8000b68 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	73fb      	strb	r3, [r7, #15]
        break;
 800285e:	e005      	b.n	800286c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ef      	bne.n	800284c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d160      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002878:	4b31      	ldr	r3, [pc, #196]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6892      	ldr	r2, [r2, #8]
 8002888:	0211      	lsls	r1, r2, #8
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68d2      	ldr	r2, [r2, #12]
 800288e:	0912      	lsrs	r2, r2, #4
 8002890:	0452      	lsls	r2, r2, #17
 8002892:	430a      	orrs	r2, r1
 8002894:	492a      	ldr	r1, [pc, #168]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	610b      	str	r3, [r1, #16]
 800289a:	e027      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d112      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	0211      	lsls	r1, r2, #8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6912      	ldr	r2, [r2, #16]
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0552      	lsls	r2, r2, #21
 80028be:	430a      	orrs	r2, r1
 80028c0:	491f      	ldr	r1, [pc, #124]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	610b      	str	r3, [r1, #16]
 80028c6:	e011      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6952      	ldr	r2, [r2, #20]
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	3a01      	subs	r2, #1
 80028e2:	0652      	lsls	r2, r2, #25
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4916      	ldr	r1, [pc, #88]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a13      	ldr	r2, [pc, #76]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe f936 	bl	8000b68 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002900:	f7fe f932 	bl	8000b68 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
          break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002952:	4b6a      	ldr	r3, [pc, #424]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d018      	beq.n	8002990 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800295e:	4b67      	ldr	r3, [pc, #412]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d10d      	bne.n	800298a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
       ||
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002976:	4b61      	ldr	r3, [pc, #388]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
       ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d047      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e044      	b.n	8002a1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d018      	beq.n	80029ca <RCCEx_PLLSAI2_Config+0x86>
 8002998:	2b03      	cmp	r3, #3
 800299a:	d825      	bhi.n	80029e8 <RCCEx_PLLSAI2_Config+0xa4>
 800299c:	2b01      	cmp	r3, #1
 800299e:	d002      	beq.n	80029a6 <RCCEx_PLLSAI2_Config+0x62>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d009      	beq.n	80029b8 <RCCEx_PLLSAI2_Config+0x74>
 80029a4:	e020      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029a6:	4b55      	ldr	r3, [pc, #340]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11d      	bne.n	80029ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b6:	e01a      	b.n	80029ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e013      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029e6:	e006      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e004      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	430b      	orrs	r3, r1
 8002a14:	4939      	ldr	r1, [pc, #228]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d167      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a20:	4b36      	ldr	r3, [pc, #216]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f89c 	bl	8000b68 <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a32:	e009      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a34:	f7fe f898 	bl	8000b68 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	73fb      	strb	r3, [r7, #15]
        break;
 8002a46:	e005      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ef      	bne.n	8002a34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d14a      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d111      	bne.n	8002a84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a60:	4b26      	ldr	r3, [pc, #152]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6892      	ldr	r2, [r2, #8]
 8002a70:	0211      	lsls	r1, r2, #8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	0912      	lsrs	r2, r2, #4
 8002a78:	0452      	lsls	r2, r2, #17
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	491f      	ldr	r1, [pc, #124]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	614b      	str	r3, [r1, #20]
 8002a82:	e011      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	0211      	lsls	r1, r2, #8
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6912      	ldr	r2, [r2, #16]
 8002a9a:	0852      	lsrs	r2, r2, #1
 8002a9c:	3a01      	subs	r2, #1
 8002a9e:	0652      	lsls	r2, r2, #25
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	4916      	ldr	r1, [pc, #88]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe f858 	bl	8000b68 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aba:	e009      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002abc:	f7fe f854 	bl	8000b68 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ace:	e005      	b.n	8002adc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4904      	ldr	r1, [pc, #16]	; (8002afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e049      	b.n	8002ba6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fe58 	bl	80007dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 f8fc 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_ConfigClockSource+0x18>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0b5      	b.n	8002d32 <HAL_TIM_ConfigClockSource+0x184>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	d03e      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xd4>
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	f200 8087 	bhi.w	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c10:	f000 8085 	beq.w	8002d1e <HAL_TIM_ConfigClockSource+0x170>
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c18:	d87f      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c1a:	2b70      	cmp	r3, #112	; 0x70
 8002c1c:	d01a      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0xa6>
 8002c1e:	2b70      	cmp	r3, #112	; 0x70
 8002c20:	d87b      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c22:	2b60      	cmp	r3, #96	; 0x60
 8002c24:	d050      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0x11a>
 8002c26:	2b60      	cmp	r3, #96	; 0x60
 8002c28:	d877      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c2a:	2b50      	cmp	r3, #80	; 0x50
 8002c2c:	d03c      	beq.n	8002ca8 <HAL_TIM_ConfigClockSource+0xfa>
 8002c2e:	2b50      	cmp	r3, #80	; 0x50
 8002c30:	d873      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d058      	beq.n	8002ce8 <HAL_TIM_ConfigClockSource+0x13a>
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d86f      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c3a:	2b30      	cmp	r3, #48	; 0x30
 8002c3c:	d064      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3e:	2b30      	cmp	r3, #48	; 0x30
 8002c40:	d86b      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d060      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0x15a>
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d867      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d05c      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0x15a>
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d05a      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c52:	e062      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f000 f97e 	bl	8002f64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e04e      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f000 f967 	bl	8002f64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca4:	609a      	str	r2, [r3, #8]
      break;
 8002ca6:	e03b      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f000 f8db 	bl	8002e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2150      	movs	r1, #80	; 0x50
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f934 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002cc6:	e02b      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f000 f8fa 	bl	8002ece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2160      	movs	r1, #96	; 0x60
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f924 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002ce6:	e01b      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f000 f8bb 	bl	8002e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2140      	movs	r1, #64	; 0x40
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f914 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d06:	e00b      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 f90b 	bl	8002f2e <TIM_ITRx_SetConfig>
        break;
 8002d18:	e002      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <TIM_Base_SetConfig+0x114>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5a:	d00f      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <TIM_Base_SetConfig+0x118>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00b      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <TIM_Base_SetConfig+0x120>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <TIM_Base_SetConfig+0x124>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d108      	bne.n	8002d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <TIM_Base_SetConfig+0x114>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01f      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d01b      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <TIM_Base_SetConfig+0x118>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d017      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <TIM_Base_SetConfig+0x11c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <TIM_Base_SetConfig+0x120>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00f      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <TIM_Base_SetConfig+0x124>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00b      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <TIM_Base_SetConfig+0x128>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <TIM_Base_SetConfig+0x12c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_Base_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <TIM_Base_SetConfig+0x130>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d108      	bne.n	8002de8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <TIM_Base_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00f      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <TIM_Base_SetConfig+0x124>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <TIM_Base_SetConfig+0x128>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <TIM_Base_SetConfig+0x12c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0xf8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <TIM_Base_SetConfig+0x130>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d103      	bne.n	8002e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	615a      	str	r2, [r3, #20]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40013400 	.word	0x40013400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800

08002e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 030a 	bic.w	r3, r3, #10
 8002eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b087      	sub	sp, #28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0210 	bic.w	r2, r3, #16
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	031b      	lsls	r3, r3, #12
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f043 0307 	orr.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	609a      	str	r2, [r3, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e068      	b.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2e      	ldr	r2, [pc, #184]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2d      	ldr	r2, [pc, #180]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d018      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10c      	bne.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40013400 	.word	0x40013400
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40014000 	.word	0x40014000

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e040      	b.n	8003148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fba0 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f89a 	bl	800322c <UART_SetConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fb18 	bl	8003740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb9f 	bl	8003884 <UART_CheckIdleState>
 8003146:	4603      	mov	r3, r0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	2b20      	cmp	r3, #32
 8003164:	d131      	bne.n	80031ca <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_UART_Receive_DMA+0x22>
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e02a      	b.n	80031cc <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_UART_Receive_DMA+0x34>
 8003180:	2302      	movs	r3, #2
 8003182:	e023      	b.n	80031cc <HAL_UART_Receive_DMA+0x7c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_UART_Receive_DMA+0x84>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031b8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	461a      	mov	r2, r3
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fc25 	bl	8003a10 <UART_Start_Receive_DMA>
 80031c6:	4603      	mov	r3, r0
 80031c8:	e000      	b.n	80031cc <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40008000 	.word	0x40008000

080031d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4313      	orrs	r3, r2
 800324e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4bad      	ldr	r3, [pc, #692]	; (800350c <UART_SetConfig+0x2e0>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	69f9      	ldr	r1, [r7, #28]
 8003260:	430b      	orrs	r3, r1
 8003262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4aa2      	ldr	r2, [pc, #648]	; (8003510 <UART_SetConfig+0x2e4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	4313      	orrs	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a99      	ldr	r2, [pc, #612]	; (8003514 <UART_SetConfig+0x2e8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d121      	bne.n	80032f6 <UART_SetConfig+0xca>
 80032b2:	4b99      	ldr	r3, [pc, #612]	; (8003518 <UART_SetConfig+0x2ec>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d817      	bhi.n	80032f0 <UART_SetConfig+0xc4>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <UART_SetConfig+0x9c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032e5 	.word	0x080032e5
 80032d0:	080032df 	.word	0x080032df
 80032d4:	080032eb 	.word	0x080032eb
 80032d8:	2301      	movs	r3, #1
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e0e7      	b.n	80034ae <UART_SetConfig+0x282>
 80032de:	2302      	movs	r3, #2
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e0e4      	b.n	80034ae <UART_SetConfig+0x282>
 80032e4:	2304      	movs	r3, #4
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e0e1      	b.n	80034ae <UART_SetConfig+0x282>
 80032ea:	2308      	movs	r3, #8
 80032ec:	76fb      	strb	r3, [r7, #27]
 80032ee:	e0de      	b.n	80034ae <UART_SetConfig+0x282>
 80032f0:	2310      	movs	r3, #16
 80032f2:	76fb      	strb	r3, [r7, #27]
 80032f4:	e0db      	b.n	80034ae <UART_SetConfig+0x282>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a88      	ldr	r2, [pc, #544]	; (800351c <UART_SetConfig+0x2f0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d132      	bne.n	8003366 <UART_SetConfig+0x13a>
 8003300:	4b85      	ldr	r3, [pc, #532]	; (8003518 <UART_SetConfig+0x2ec>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d828      	bhi.n	8003360 <UART_SetConfig+0x134>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <UART_SetConfig+0xe8>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003349 	.word	0x08003349
 8003318:	08003361 	.word	0x08003361
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	08003355 	.word	0x08003355
 8003328:	08003361 	.word	0x08003361
 800332c:	08003361 	.word	0x08003361
 8003330:	08003361 	.word	0x08003361
 8003334:	0800334f 	.word	0x0800334f
 8003338:	08003361 	.word	0x08003361
 800333c:	08003361 	.word	0x08003361
 8003340:	08003361 	.word	0x08003361
 8003344:	0800335b 	.word	0x0800335b
 8003348:	2300      	movs	r3, #0
 800334a:	76fb      	strb	r3, [r7, #27]
 800334c:	e0af      	b.n	80034ae <UART_SetConfig+0x282>
 800334e:	2302      	movs	r3, #2
 8003350:	76fb      	strb	r3, [r7, #27]
 8003352:	e0ac      	b.n	80034ae <UART_SetConfig+0x282>
 8003354:	2304      	movs	r3, #4
 8003356:	76fb      	strb	r3, [r7, #27]
 8003358:	e0a9      	b.n	80034ae <UART_SetConfig+0x282>
 800335a:	2308      	movs	r3, #8
 800335c:	76fb      	strb	r3, [r7, #27]
 800335e:	e0a6      	b.n	80034ae <UART_SetConfig+0x282>
 8003360:	2310      	movs	r3, #16
 8003362:	76fb      	strb	r3, [r7, #27]
 8003364:	e0a3      	b.n	80034ae <UART_SetConfig+0x282>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6d      	ldr	r2, [pc, #436]	; (8003520 <UART_SetConfig+0x2f4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d120      	bne.n	80033b2 <UART_SetConfig+0x186>
 8003370:	4b69      	ldr	r3, [pc, #420]	; (8003518 <UART_SetConfig+0x2ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800337a:	2b30      	cmp	r3, #48	; 0x30
 800337c:	d013      	beq.n	80033a6 <UART_SetConfig+0x17a>
 800337e:	2b30      	cmp	r3, #48	; 0x30
 8003380:	d814      	bhi.n	80033ac <UART_SetConfig+0x180>
 8003382:	2b20      	cmp	r3, #32
 8003384:	d009      	beq.n	800339a <UART_SetConfig+0x16e>
 8003386:	2b20      	cmp	r3, #32
 8003388:	d810      	bhi.n	80033ac <UART_SetConfig+0x180>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <UART_SetConfig+0x168>
 800338e:	2b10      	cmp	r3, #16
 8003390:	d006      	beq.n	80033a0 <UART_SetConfig+0x174>
 8003392:	e00b      	b.n	80033ac <UART_SetConfig+0x180>
 8003394:	2300      	movs	r3, #0
 8003396:	76fb      	strb	r3, [r7, #27]
 8003398:	e089      	b.n	80034ae <UART_SetConfig+0x282>
 800339a:	2302      	movs	r3, #2
 800339c:	76fb      	strb	r3, [r7, #27]
 800339e:	e086      	b.n	80034ae <UART_SetConfig+0x282>
 80033a0:	2304      	movs	r3, #4
 80033a2:	76fb      	strb	r3, [r7, #27]
 80033a4:	e083      	b.n	80034ae <UART_SetConfig+0x282>
 80033a6:	2308      	movs	r3, #8
 80033a8:	76fb      	strb	r3, [r7, #27]
 80033aa:	e080      	b.n	80034ae <UART_SetConfig+0x282>
 80033ac:	2310      	movs	r3, #16
 80033ae:	76fb      	strb	r3, [r7, #27]
 80033b0:	e07d      	b.n	80034ae <UART_SetConfig+0x282>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <UART_SetConfig+0x2f8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d120      	bne.n	80033fe <UART_SetConfig+0x1d2>
 80033bc:	4b56      	ldr	r3, [pc, #344]	; (8003518 <UART_SetConfig+0x2ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033c6:	2bc0      	cmp	r3, #192	; 0xc0
 80033c8:	d013      	beq.n	80033f2 <UART_SetConfig+0x1c6>
 80033ca:	2bc0      	cmp	r3, #192	; 0xc0
 80033cc:	d814      	bhi.n	80033f8 <UART_SetConfig+0x1cc>
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d009      	beq.n	80033e6 <UART_SetConfig+0x1ba>
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d810      	bhi.n	80033f8 <UART_SetConfig+0x1cc>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <UART_SetConfig+0x1b4>
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d006      	beq.n	80033ec <UART_SetConfig+0x1c0>
 80033de:	e00b      	b.n	80033f8 <UART_SetConfig+0x1cc>
 80033e0:	2300      	movs	r3, #0
 80033e2:	76fb      	strb	r3, [r7, #27]
 80033e4:	e063      	b.n	80034ae <UART_SetConfig+0x282>
 80033e6:	2302      	movs	r3, #2
 80033e8:	76fb      	strb	r3, [r7, #27]
 80033ea:	e060      	b.n	80034ae <UART_SetConfig+0x282>
 80033ec:	2304      	movs	r3, #4
 80033ee:	76fb      	strb	r3, [r7, #27]
 80033f0:	e05d      	b.n	80034ae <UART_SetConfig+0x282>
 80033f2:	2308      	movs	r3, #8
 80033f4:	76fb      	strb	r3, [r7, #27]
 80033f6:	e05a      	b.n	80034ae <UART_SetConfig+0x282>
 80033f8:	2310      	movs	r3, #16
 80033fa:	76fb      	strb	r3, [r7, #27]
 80033fc:	e057      	b.n	80034ae <UART_SetConfig+0x282>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a49      	ldr	r2, [pc, #292]	; (8003528 <UART_SetConfig+0x2fc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d125      	bne.n	8003454 <UART_SetConfig+0x228>
 8003408:	4b43      	ldr	r3, [pc, #268]	; (8003518 <UART_SetConfig+0x2ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003416:	d017      	beq.n	8003448 <UART_SetConfig+0x21c>
 8003418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800341c:	d817      	bhi.n	800344e <UART_SetConfig+0x222>
 800341e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003422:	d00b      	beq.n	800343c <UART_SetConfig+0x210>
 8003424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003428:	d811      	bhi.n	800344e <UART_SetConfig+0x222>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <UART_SetConfig+0x20a>
 800342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003432:	d006      	beq.n	8003442 <UART_SetConfig+0x216>
 8003434:	e00b      	b.n	800344e <UART_SetConfig+0x222>
 8003436:	2300      	movs	r3, #0
 8003438:	76fb      	strb	r3, [r7, #27]
 800343a:	e038      	b.n	80034ae <UART_SetConfig+0x282>
 800343c:	2302      	movs	r3, #2
 800343e:	76fb      	strb	r3, [r7, #27]
 8003440:	e035      	b.n	80034ae <UART_SetConfig+0x282>
 8003442:	2304      	movs	r3, #4
 8003444:	76fb      	strb	r3, [r7, #27]
 8003446:	e032      	b.n	80034ae <UART_SetConfig+0x282>
 8003448:	2308      	movs	r3, #8
 800344a:	76fb      	strb	r3, [r7, #27]
 800344c:	e02f      	b.n	80034ae <UART_SetConfig+0x282>
 800344e:	2310      	movs	r3, #16
 8003450:	76fb      	strb	r3, [r7, #27]
 8003452:	e02c      	b.n	80034ae <UART_SetConfig+0x282>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <UART_SetConfig+0x2e4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d125      	bne.n	80034aa <UART_SetConfig+0x27e>
 800345e:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <UART_SetConfig+0x2ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800346c:	d017      	beq.n	800349e <UART_SetConfig+0x272>
 800346e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003472:	d817      	bhi.n	80034a4 <UART_SetConfig+0x278>
 8003474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003478:	d00b      	beq.n	8003492 <UART_SetConfig+0x266>
 800347a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347e:	d811      	bhi.n	80034a4 <UART_SetConfig+0x278>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <UART_SetConfig+0x260>
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d006      	beq.n	8003498 <UART_SetConfig+0x26c>
 800348a:	e00b      	b.n	80034a4 <UART_SetConfig+0x278>
 800348c:	2300      	movs	r3, #0
 800348e:	76fb      	strb	r3, [r7, #27]
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x282>
 8003492:	2302      	movs	r3, #2
 8003494:	76fb      	strb	r3, [r7, #27]
 8003496:	e00a      	b.n	80034ae <UART_SetConfig+0x282>
 8003498:	2304      	movs	r3, #4
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e007      	b.n	80034ae <UART_SetConfig+0x282>
 800349e:	2308      	movs	r3, #8
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e004      	b.n	80034ae <UART_SetConfig+0x282>
 80034a4:	2310      	movs	r3, #16
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	e001      	b.n	80034ae <UART_SetConfig+0x282>
 80034aa:	2310      	movs	r3, #16
 80034ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a17      	ldr	r2, [pc, #92]	; (8003510 <UART_SetConfig+0x2e4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	f040 8087 	bne.w	80035c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ba:	7efb      	ldrb	r3, [r7, #27]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d837      	bhi.n	8003530 <UART_SetConfig+0x304>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x29c>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	08003531 	.word	0x08003531
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	08003531 	.word	0x08003531
 80034d8:	080034fb 	.word	0x080034fb
 80034dc:	08003531 	.word	0x08003531
 80034e0:	08003531 	.word	0x08003531
 80034e4:	08003531 	.word	0x08003531
 80034e8:	08003503 	.word	0x08003503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe fdc0 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 80034f0:	6178      	str	r0, [r7, #20]
        break;
 80034f2:	e022      	b.n	800353a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <UART_SetConfig+0x300>)
 80034f6:	617b      	str	r3, [r7, #20]
        break;
 80034f8:	e01f      	b.n	800353a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fa:	f7fe fd21 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 80034fe:	6178      	str	r0, [r7, #20]
        break;
 8003500:	e01b      	b.n	800353a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003506:	617b      	str	r3, [r7, #20]
        break;
 8003508:	e017      	b.n	800353a <UART_SetConfig+0x30e>
 800350a:	bf00      	nop
 800350c:	efff69f3 	.word	0xefff69f3
 8003510:	40008000 	.word	0x40008000
 8003514:	40013800 	.word	0x40013800
 8003518:	40021000 	.word	0x40021000
 800351c:	40004400 	.word	0x40004400
 8003520:	40004800 	.word	0x40004800
 8003524:	40004c00 	.word	0x40004c00
 8003528:	40005000 	.word	0x40005000
 800352c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	76bb      	strb	r3, [r7, #26]
        break;
 8003538:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80f1 	beq.w	8003724 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	429a      	cmp	r2, r3
 8003550:	d305      	bcc.n	800355e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	d902      	bls.n	8003564 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	76bb      	strb	r3, [r7, #26]
 8003562:	e0df      	b.n	8003724 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4618      	mov	r0, r3
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	020b      	lsls	r3, r1, #8
 8003576:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800357a:	0202      	lsls	r2, r0, #8
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	6849      	ldr	r1, [r1, #4]
 8003580:	0849      	lsrs	r1, r1, #1
 8003582:	4608      	mov	r0, r1
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	1814      	adds	r4, r2, r0
 800358a:	eb43 0501 	adc.w	r5, r3, r1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	461a      	mov	r2, r3
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	4620      	mov	r0, r4
 800359a:	4629      	mov	r1, r5
 800359c:	f7fc fe14 	bl	80001c8 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ae:	d308      	bcc.n	80035c2 <UART_SetConfig+0x396>
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b6:	d204      	bcs.n	80035c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	e0b0      	b.n	8003724 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	76bb      	strb	r3, [r7, #26]
 80035c6:	e0ad      	b.n	8003724 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	d15c      	bne.n	800368c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80035d2:	7efb      	ldrb	r3, [r7, #27]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d828      	bhi.n	800362a <UART_SetConfig+0x3fe>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <UART_SetConfig+0x3b4>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800360d 	.word	0x0800360d
 80035e8:	08003615 	.word	0x08003615
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	0800361b 	.word	0x0800361b
 80035f4:	0800362b 	.word	0x0800362b
 80035f8:	0800362b 	.word	0x0800362b
 80035fc:	0800362b 	.word	0x0800362b
 8003600:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7fe fd34 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8003608:	6178      	str	r0, [r7, #20]
        break;
 800360a:	e013      	b.n	8003634 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7fe fd46 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 8003610:	6178      	str	r0, [r7, #20]
        break;
 8003612:	e00f      	b.n	8003634 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b49      	ldr	r3, [pc, #292]	; (800373c <UART_SetConfig+0x510>)
 8003616:	617b      	str	r3, [r7, #20]
        break;
 8003618:	e00c      	b.n	8003634 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7fe fc91 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 800361e:	6178      	str	r0, [r7, #20]
        break;
 8003620:	e008      	b.n	8003634 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	617b      	str	r3, [r7, #20]
        break;
 8003628:	e004      	b.n	8003634 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	76bb      	strb	r3, [r7, #26]
        break;
 8003632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d074      	beq.n	8003724 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005a      	lsls	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	b29b      	uxth	r3, r3
 8003650:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b0f      	cmp	r3, #15
 8003656:	d916      	bls.n	8003686 <UART_SetConfig+0x45a>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d212      	bcs.n	8003686 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	b29a      	uxth	r2, r3
 8003676:	89fb      	ldrh	r3, [r7, #14]
 8003678:	4313      	orrs	r3, r2
 800367a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	89fa      	ldrh	r2, [r7, #14]
 8003682:	60da      	str	r2, [r3, #12]
 8003684:	e04e      	b.n	8003724 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	76bb      	strb	r3, [r7, #26]
 800368a:	e04b      	b.n	8003724 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800368c:	7efb      	ldrb	r3, [r7, #27]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d827      	bhi.n	80036e2 <UART_SetConfig+0x4b6>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0x46c>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036e3 	.word	0x080036e3
 80036b0:	080036e3 	.word	0x080036e3
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe fcd8 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 80036c0:	6178      	str	r0, [r7, #20]
        break;
 80036c2:	e013      	b.n	80036ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7fe fcea 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 80036c8:	6178      	str	r0, [r7, #20]
        break;
 80036ca:	e00f      	b.n	80036ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <UART_SetConfig+0x510>)
 80036ce:	617b      	str	r3, [r7, #20]
        break;
 80036d0:	e00c      	b.n	80036ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7fe fc35 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 80036d6:	6178      	str	r0, [r7, #20]
        break;
 80036d8:	e008      	b.n	80036ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036de:	617b      	str	r3, [r7, #20]
        break;
 80036e0:	e004      	b.n	80036ec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	76bb      	strb	r3, [r7, #26]
        break;
 80036ea:	bf00      	nop
    }

    if (pclk != 0U)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	085a      	lsrs	r2, r3, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	b29b      	uxth	r3, r3
 8003706:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	d908      	bls.n	8003720 <UART_SetConfig+0x4f4>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d204      	bcs.n	8003720 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	e001      	b.n	8003724 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003730:	7ebb      	ldrb	r3, [r7, #26]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bdb0      	pop	{r4, r5, r7, pc}
 800373a:	bf00      	nop
 800373c:	00f42400 	.word	0x00f42400

08003740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01a      	beq.n	8003856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383e:	d10a      	bne.n	8003856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	605a      	str	r2, [r3, #4]
  }
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003894:	f7fd f968 	bl	8000b68 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d10e      	bne.n	80038c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f82d 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e023      	b.n	800390e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d10e      	bne.n	80038f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f817 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e00d      	b.n	800390e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	e05e      	b.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d05a      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fd f91a 	bl	8000b68 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11b      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003954:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e043      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d02c      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399a:	d124      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039a4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00f      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4013      	ands	r3, r2
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d091      	beq.n	8003928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2222      	movs	r2, #34	; 0x22
 8003a38:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02b      	beq.n	8003a9a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <UART_Start_Receive_DMA+0xcc>)
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <UART_Start_Receive_DMA+0xd0>)
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <UART_Start_Receive_DMA+0xd4>)
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	2200      	movs	r2, #0
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3324      	adds	r3, #36	; 0x24
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	461a      	mov	r2, r3
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f7fd fa4d 	bl	8000f14 <HAL_DMA_Start_IT>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00c      	beq.n	8003a9a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2210      	movs	r2, #16
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e01c      	b.n	8003ad4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08003b71 	.word	0x08003b71
 8003ae0:	08003c09 	.word	0x08003c09
 8003ae4:	08003c41 	.word	0x08003c41

08003ae8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003afe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b28:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0210 	bic.w	r2, r2, #16
 8003b50:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d12a      	bne.n	8003be2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0210 	bic.w	r2, r2, #16
 8003be0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff fb0e 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bf8:	e002      	b.n	8003c00 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff faec 	bl	80031d8 <HAL_UART_RxCpltCallback>
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d109      	bne.n	8003c32 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff faf2 	bl	8003214 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c30:	e002      	b.n	8003c38 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fada 	bl	80031ec <HAL_UART_RxHalfCpltCallback>
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d109      	bne.n	8003c7c <UART_DMAError+0x3c>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b21      	cmp	r3, #33	; 0x21
 8003c6c:	d106      	bne.n	8003c7c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	f7ff ff36 	bl	8003ae8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d109      	bne.n	8003c9e <UART_DMAError+0x5e>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b22      	cmp	r3, #34	; 0x22
 8003c8e:	d106      	bne.n	8003c9e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003c98:	6978      	ldr	r0, [r7, #20]
 8003c9a:	f7ff ff3a 	bl	8003b12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff faa6 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb4:	bf00      	nop
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4d0d      	ldr	r5, [pc, #52]	; (8003cf4 <__libc_init_array+0x38>)
 8003cc0:	4c0d      	ldr	r4, [pc, #52]	; (8003cf8 <__libc_init_array+0x3c>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	4d0b      	ldr	r5, [pc, #44]	; (8003cfc <__libc_init_array+0x40>)
 8003cce:	4c0c      	ldr	r4, [pc, #48]	; (8003d00 <__libc_init_array+0x44>)
 8003cd0:	f000 f820 	bl	8003d14 <_init>
 8003cd4:	1b64      	subs	r4, r4, r5
 8003cd6:	10a4      	asrs	r4, r4, #2
 8003cd8:	2600      	movs	r6, #0
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	08003d7c 	.word	0x08003d7c
 8003cf8:	08003d7c 	.word	0x08003d7c
 8003cfc:	08003d7c 	.word	0x08003d7c
 8003d00:	08003d80 	.word	0x08003d80

08003d04 <memset>:
 8003d04:	4402      	add	r2, r0
 8003d06:	4603      	mov	r3, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
